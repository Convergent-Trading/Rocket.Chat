{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:importer-csv/info.js","meteor://ðŸ’»app/packages/rocketchat:importer-csv/server/importer.js","meteor://ðŸ’»app/packages/rocketchat:importer-csv/server/adder.js"],"names":["module","export","CsvImporterInfo","ImporterInfo","watch","require","v","constructor","text","href","CsvImporter","Base","ProgressStep","Selection","SelectionChannel","SelectionUser","info","csvParser","messages","Map","prepare","dataURI","sentContentType","fileName","uriResult","RocketChatFile","dataURIParse","zip","AdmZip","Buffer","image","zipEntries","getEntries","tempChannels","tempUsers","tempMessages","entry","logger","debug","entryName","indexOf","isDirectory","toLowerCase","updateProgress","PREPARING_CHANNELS","parsedChannels","getData","toString","map","c","id","trim","replace","name","creator","isPrivate","members","split","m","PREPARING_USERS","parsedUsers","u","username","email","item","channelName","msgGroupData","get","set","msgs","e","warn","ts","usersId","collection","insert","import","importRecord","_id","importer","type","users","findOne","updateRecord","length","addCountToTotal","channelsId","channels","PREPARING_MESSAGES","messagesCount","channel","messagesMap","entries","messagesstatus","getBSONSize","getMaxBSONSize","getBSONSafeArraysFromAnArray","forEach","splitMsg","i","messagesId","error","ERROR","getProgress","selectionUsers","selectionChannels","selectionMessages","count","USER_SELECTION","startImport","importSelection","started","Date","now","user","user_id","do_import","update","$set","channel_id","startedByUserId","Meteor","userId","defer","IMPORTING_USERS","runAsUser","existantUser","RocketChat","models","Users","findOneByEmailAddress","findOneByUsername","rocketId","$addToSet","importIds","Accounts","createUser","password","toUpperCase","call","joinDefaultChannelsSilenced","setName","addCountCompleted","IMPORTING_CHANNELS","existantRoom","Rooms","findOneByName","creatorId","roomInfo","rid","cname","keys","push","ch","csvChannel","getChannelFromName","values","msg","getUserFromUsername","IMPORTING_MESSAGES","room","findOneById","fields","usernames","t","timestamps","isNaN","parseInt","suffix","undefined","msgObj","sendMessage","FINISHING","DONE","timeTook","log","getSelection","Importers","add"],"mappings":"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","file":"/packages/rocketchat_importer-csv.js","sourcesContent":["import { ImporterInfo } from 'meteor/rocketchat:importer';\n\nexport class CsvImporterInfo extends ImporterInfo {\n\tconstructor() {\n\t\tsuper('csv', 'CSV', 'application/zip', [{\n\t\t\ttext: 'Importer_CSV_Information',\n\t\t\thref: 'https://rocket.chat/docs/administrator-guides/import/csv/',\n\t\t}]);\n\t}\n}\n","import {\n\tBase,\n\tProgressStep,\n\tSelection,\n\tSelectionChannel,\n\tSelectionUser,\n} from 'meteor/rocketchat:importer';\n\nexport class CsvImporter extends Base {\n\tconstructor(info) {\n\t\tsuper(info);\n\n\t\tthis.csvParser = require('csv-parse/lib/sync');\n\t\tthis.messages = new Map();\n\t}\n\n\tprepare(dataURI, sentContentType, fileName) {\n\t\tsuper.prepare(dataURI, sentContentType, fileName);\n\n\t\tconst uriResult = RocketChatFile.dataURIParse(dataURI);\n\t\tconst zip = new this.AdmZip(new Buffer(uriResult.image, 'base64'));\n\t\tconst zipEntries = zip.getEntries();\n\n\t\tlet tempChannels = [];\n\t\tlet tempUsers = [];\n\t\tconst tempMessages = new Map();\n\t\tfor (const entry of zipEntries) {\n\t\t\tthis.logger.debug(`Entry: ${ entry.entryName }`);\n\n\t\t\t// Ignore anything that has `__MACOSX` in it's name, as sadly these things seem to mess everything up\n\t\t\tif (entry.entryName.indexOf('__MACOSX') > -1) {\n\t\t\t\tthis.logger.debug(`Ignoring the file: ${ entry.entryName }`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Directories are ignored, since they are \"virtual\" in a zip file\n\t\t\tif (entry.isDirectory) {\n\t\t\t\tthis.logger.debug(`Ignoring the directory entry: ${ entry.entryName }`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Parse the channels\n\t\t\tif (entry.entryName.toLowerCase() === 'channels.csv') {\n\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\t\t\tconst parsedChannels = this.csvParser(entry.getData().toString());\n\t\t\t\ttempChannels = parsedChannels.map((c) => ({\n\t\t\t\t\tid: c[0].trim().replace('.', '_'),\n\t\t\t\t\tname: c[0].trim(),\n\t\t\t\t\tcreator: c[1].trim(),\n\t\t\t\t\tisPrivate: c[2].trim().toLowerCase() === 'private',\n\t\t\t\t\tmembers: c[3].trim().split(';').map((m) => m.trim()),\n\t\t\t\t}));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Parse the users\n\t\t\tif (entry.entryName.toLowerCase() === 'users.csv') {\n\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_USERS);\n\t\t\t\tconst parsedUsers = this.csvParser(entry.getData().toString());\n\t\t\t\ttempUsers = parsedUsers.map((u) => ({ id: u[0].trim().replace('.', '_'), username: u[0].trim(), email: u[1].trim(), name: u[2].trim() }));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Parse the messages\n\t\t\tif (entry.entryName.indexOf('/') > -1) {\n\t\t\t\tconst item = entry.entryName.split('/'); // random/messages.csv\n\t\t\t\tconst channelName = item[0]; // random\n\t\t\t\tconst msgGroupData = item[1].split('.')[0]; // 2015-10-04\n\n\t\t\t\tif (!tempMessages.get(channelName)) {\n\t\t\t\t\ttempMessages.set(channelName, new Map());\n\t\t\t\t}\n\n\t\t\t\tlet msgs = [];\n\n\t\t\t\ttry {\n\t\t\t\t\tmsgs = this.csvParser(entry.getData().toString());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.warn(`The file ${ entry.entryName } contains invalid syntax`, e);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttempMessages.get(channelName).set(msgGroupData, msgs.map((m) => ({ username: m[0], ts: m[1], text: m[2] })));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// Insert the users record, eventually this might have to be split into several ones as well\n\t\t// if someone tries to import a several thousands users instance\n\t\tconst usersId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'users', users: tempUsers });\n\t\tthis.users = this.collection.findOne(usersId);\n\t\tsuper.updateRecord({ 'count.users': tempUsers.length });\n\t\tsuper.addCountToTotal(tempUsers.length);\n\n\t\t// Insert the channels records.\n\t\tconst channelsId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'channels', channels: tempChannels });\n\t\tthis.channels = this.collection.findOne(channelsId);\n\t\tsuper.updateRecord({ 'count.channels': tempChannels.length });\n\t\tsuper.addCountToTotal(tempChannels.length);\n\n\t\t// Save the messages records to the import record for `startImport` usage\n\t\tsuper.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\t\tlet messagesCount = 0;\n\t\tfor (const [channel, messagesMap] of tempMessages.entries()) {\n\t\t\tif (!this.messages.get(channel)) {\n\t\t\t\tthis.messages.set(channel, new Map());\n\t\t\t}\n\n\t\t\tfor (const [msgGroupData, msgs] of messagesMap.entries()) {\n\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\tsuper.updateRecord({ messagesstatus: `${ channel }/${ msgGroupData }` });\n\n\t\t\t\tif (Base.getBSONSize(msgs) > Base.getMaxBSONSize()) {\n\t\t\t\t\tBase.getBSONSafeArraysFromAnArray(msgs).forEach((splitMsg, i) => {\n\t\t\t\t\t\tconst messagesId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'messages', name: `${ channel }/${ msgGroupData }.${ i }`, messages: splitMsg });\n\t\t\t\t\t\tthis.messages.get(channel).set(`${ msgGroupData }.${ i }`, this.collection.findOne(messagesId));\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst messagesId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'messages', name: `${ channel }/${ msgGroupData }`, messages: msgs });\n\t\t\t\t\tthis.messages.get(channel).set(msgGroupData, this.collection.findOne(messagesId));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsuper.updateRecord({ 'count.messages': messagesCount, messagesstatus: null });\n\t\tsuper.addCountToTotal(messagesCount);\n\n\t\t// Ensure we have at least a single user, channel, or message\n\t\tif (tempUsers.length === 0 && tempChannels.length === 0 && messagesCount === 0) {\n\t\t\tthis.logger.error('No users, channels, or messages found in the import file.');\n\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\treturn super.getProgress();\n\t\t}\n\n\t\tconst selectionUsers = tempUsers.map((u) => new SelectionUser(u.id, u.username, u.email, false, false, true));\n\t\tconst selectionChannels = tempChannels.map((c) => new SelectionChannel(c.id, c.name, false, true, c.isPrivate));\n\t\tconst selectionMessages = this.importRecord.count.messages;\n\n\t\tsuper.updateProgress(ProgressStep.USER_SELECTION);\n\t\treturn new Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n\t}\n\n\tstartImport(importSelection) {\n\t\tsuper.startImport(importSelection);\n\t\tconst started = Date.now();\n\n\t\t// Ensure we're only going to import the users that the user has selected\n\t\tfor (const user of importSelection.users) {\n\t\t\tfor (const u of this.users.users) {\n\t\t\t\tif (u.id === user.user_id) {\n\t\t\t\t\tu.do_import = user.do_import;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.collection.update({ _id: this.users._id }, { $set: { users: this.users.users } });\n\n\t\t// Ensure we're only importing the channels the user has selected.\n\t\tfor (const channel of importSelection.channels) {\n\t\t\tfor (const c of this.channels.channels) {\n\t\t\t\tif (c.id === channel.channel_id) {\n\t\t\t\t\tc.do_import = channel.do_import;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.collection.update({ _id: this.channels._id }, { $set: { channels: this.channels.channels } });\n\n\t\tconst startedByUserId = Meteor.userId();\n\t\tMeteor.defer(() => {\n\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_USERS);\n\n\t\t\ttry {\n\t\t\t\t// Import the users\n\t\t\t\tfor (const u of this.users.users) {\n\t\t\t\t\tif (!u.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tlet existantUser = RocketChat.models.Users.findOneByEmailAddress(u.email);\n\n\t\t\t\t\t\t// If we couldn't find one by their email address, try to find an existing user by their username\n\t\t\t\t\t\tif (!existantUser) {\n\t\t\t\t\t\t\texistantUser = RocketChat.models.Users.findOneByUsername(u.username);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (existantUser) {\n\t\t\t\t\t\t\t// since we have an existing user, let's try a few things\n\t\t\t\t\t\t\tu.rocketId = existantUser._id;\n\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: u.rocketId }, { $addToSet: { importIds: u.id } });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst userId = Accounts.createUser({ email: u.email, password: Date.now() + u.name + u.email.toUpperCase() });\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tMeteor.call('setUsername', u.username, { joinDefaultChannelsSilenced: true });\n\t\t\t\t\t\t\t\tRocketChat.models.Users.setName(userId, u.name);\n\t\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: userId }, { $addToSet: { importIds: u.id } });\n\t\t\t\t\t\t\t\tu.rocketId = userId;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.collection.update({ _id: this.users._id }, { $set: { users: this.users.users } });\n\n\t\t\t\t// Import the channels\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_CHANNELS);\n\t\t\t\tfor (const c of this.channels.channels) {\n\t\t\t\t\tif (!c.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst existantRoom = RocketChat.models.Rooms.findOneByName(c.name);\n\t\t\t\t\t\t// If the room exists or the name of it is 'general', then we don't need to create it again\n\t\t\t\t\t\tif (existantRoom || c.name.toUpperCase() === 'GENERAL') {\n\t\t\t\t\t\t\tc.rocketId = c.name.toUpperCase() === 'GENERAL' ? 'GENERAL' : existantRoom._id;\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: c.rocketId }, { $addToSet: { importIds: c.id } });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Find the rocketchatId of the user who created this channel\n\t\t\t\t\t\t\tlet creatorId = startedByUserId;\n\t\t\t\t\t\t\tfor (const u of this.users.users) {\n\t\t\t\t\t\t\t\tif (u.username === c.creator && u.do_import) {\n\t\t\t\t\t\t\t\t\tcreatorId = u.rocketId;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Create the channel\n\t\t\t\t\t\t\tMeteor.runAsUser(creatorId, () => {\n\t\t\t\t\t\t\t\tconst roomInfo = Meteor.call(c.isPrivate ? 'createPrivateGroup' : 'createChannel', c.name, c.members);\n\t\t\t\t\t\t\t\tc.rocketId = roomInfo.rid;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: c.rocketId }, { $addToSet: { importIds: c.id } });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.collection.update({ _id: this.channels._id }, { $set: { channels: this.channels.channels } });\n\n\t\t\t\t// If no channels file, collect channel map from DB for message-only import\n\t\t\t\tif (this.channels.channels.length === 0) {\n\t\t\t\t\tfor (const cname of this.messages.keys()) {\n\t\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\t\tconst existantRoom = RocketChat.models.Rooms.findOneByName(cname);\n\t\t\t\t\t\t\tif (existantRoom || cname.toUpperCase() === 'GENERAL') {\n\t\t\t\t\t\t\t\tthis.channels.channels.push({\n\t\t\t\t\t\t\t\t\tid: cname.replace('.', '_'),\n\t\t\t\t\t\t\t\t\tname: cname,\n\t\t\t\t\t\t\t\t\trocketId: (cname.toUpperCase() === 'GENERAL' ? 'GENERAL' : existantRoom._id),\n\t\t\t\t\t\t\t\t\tdo_import: true,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If no users file, collect user map from DB for message-only import\n\t\t\t\tif (this.users.users.length === 0) {\n\t\t\t\t\tfor (const [ch, messagesMap] of this.messages.entries()) {\n\t\t\t\t\t\tconst csvChannel = this.getChannelFromName(ch);\n\t\t\t\t\t\tif (!csvChannel || !csvChannel.do_import) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\t\tfor (const msgs of messagesMap.values()) {\n\t\t\t\t\t\t\t\tfor (const msg of msgs.messages) {\n\t\t\t\t\t\t\t\t\tif (!this.getUserFromUsername(msg.username)) {\n\t\t\t\t\t\t\t\t\t\tconst user = RocketChat.models.Users.findOneByUsername(msg.username);\n\t\t\t\t\t\t\t\t\t\tif (user) {\n\t\t\t\t\t\t\t\t\t\t\tthis.users.users.push({\n\t\t\t\t\t\t\t\t\t\t\t\trocketId: user._id,\n\t\t\t\t\t\t\t\t\t\t\t\tusername: user.username,\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Import the Messages\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_MESSAGES);\n\t\t\t\tfor (const [ch, messagesMap] of this.messages.entries()) {\n\t\t\t\t\tconst csvChannel = this.getChannelFromName(ch);\n\t\t\t\t\tif (!csvChannel || !csvChannel.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst room = RocketChat.models.Rooms.findOneById(csvChannel.rocketId, { fields: { usernames: 1, t: 1, name: 1 } });\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst timestamps = {};\n\t\t\t\t\t\tfor (const [msgGroupData, msgs] of messagesMap.entries()) {\n\t\t\t\t\t\t\tsuper.updateRecord({ messagesstatus: `${ ch }/${ msgGroupData }.${ msgs.messages.length }` });\n\t\t\t\t\t\t\tfor (const msg of msgs.messages) {\n\t\t\t\t\t\t\t\tif (isNaN(new Date(parseInt(msg.ts)))) {\n\t\t\t\t\t\t\t\t\tthis.logger.warn(`Timestamp on a message in ${ ch }/${ msgGroupData } is invalid`);\n\t\t\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst creator = this.getUserFromUsername(msg.username);\n\t\t\t\t\t\t\t\tif (creator) {\n\t\t\t\t\t\t\t\t\tlet suffix = '';\n\t\t\t\t\t\t\t\t\tif (timestamps[msg.ts] === undefined) {\n\t\t\t\t\t\t\t\t\t\ttimestamps[msg.ts] = 1;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tsuffix = `-${ timestamps[msg.ts] }`;\n\t\t\t\t\t\t\t\t\t\ttimestamps[msg.ts] += 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t_id: `csv-${ csvChannel.id }-${ msg.ts }${ suffix }`,\n\t\t\t\t\t\t\t\t\t\tts: new Date(parseInt(msg.ts)),\n\t\t\t\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t\t\t_id: creator._id,\n\t\t\t\t\t\t\t\t\t\t\tusername: creator.username,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(creator, msgObj, room, true);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tsuper.updateProgress(ProgressStep.FINISHING);\n\t\t\t\tsuper.updateProgress(ProgressStep.DONE);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\t}\n\n\t\t\tconst timeTook = Date.now() - started;\n\t\t\tthis.logger.log(`CSV Import took ${ timeTook } milliseconds.`);\n\t\t});\n\n\t\treturn super.getProgress();\n\t}\n\n\tgetSelection() {\n\t\tconst selectionUsers = this.users.users.map((u) => new SelectionUser(u.id, u.username, u.email, false, false, true));\n\t\tconst selectionChannels = this.channels.channels.map((c) => new SelectionChannel(c.id, c.name, false, true, c.isPrivate));\n\t\tconst selectionMessages = this.importRecord.count.messages;\n\n\t\treturn new Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n\t}\n\n\tgetChannelFromName(channelName) {\n\t\tfor (const ch of this.channels.channels) {\n\t\t\tif (ch.name === channelName) {\n\t\t\t\treturn ch;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetUserFromUsername(username) {\n\t\tfor (const u of this.users.users) {\n\t\t\tif (u.username === username) {\n\t\t\t\treturn RocketChat.models.Users.findOneById(u.rocketId, { fields: { username: 1 } });\n\t\t\t}\n\t\t}\n\t}\n}\n","import { Importers } from 'meteor/rocketchat:importer';\nimport { CsvImporterInfo } from '../info';\nimport { CsvImporter } from './importer';\n\nImporters.add(new CsvImporterInfo(), CsvImporter);\n"]}