{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/logger.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/settings.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/slackbridge.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/slackbridge_import.server.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/RocketAdapter.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/SlackAdapter.js"],"names":["logger","Logger","sections","connection","events","class","slack","rocket","Meteor","startup","RocketChat","settings","addGroup","add","type","i18nLabel","public","enableQuery","_id","value","i18nDescription","SlackAdapter","module","watch","require","default","v","RocketAdapter","SlackBridge","constructor","reactionsMap","Map","connected","setSlack","setRocket","apiToken","aliasFormat","excludeBotnames","isReactionsEnabled","processSettings","connect","get","info","disconnect","key","debug","SlackBridgeImport","command","params","item","Match","test","String","room","models","Rooms","findOneById","rid","channel","name","user","users","findOne","userId","msgStream","emit","Random","id","u","username","ts","Date","msg","TAPi18n","__","postProcess","sprintf","language","importMessages","error","message","slashCommands","export","_","slackBridge","util","Npm","userTags","registerForEvents","unregisterForEvents","callbacks","onMessage","bind","priority","LOW","onMessageDelete","onSetReaction","onUnSetReaction","remove","rocketMessageDeleted","getSlackChannel","postDeleteMessage","err","rocketMsgID","reaction","delete","rocketMsg","Messages","slackChannel","slackTS","getTimeStamp","postReactionAdded","replace","postReactionRemove","rocketMessage","editedAt","processMessageChanged","indexOf","file","processFileShare","processSendMessage","postMessage","outSlackChannels","pluck","getMessageAttachment","attachments","length","fileId","find","attachment","title_link","getFileDownloadUrl","file_name","text","absoluteUrl","description","updatedBySlack","postMessageUpdate","getChannel","slackMessage","findChannel","addChannel","getUser","slackUser","findUser","addUser","createRocketID","slackChannelId","findOneByImportId","slackChannelID","hasRetried","slackResults","isGroup","charAt","HTTP","token","data","ok","rocketChannelData","group","existingRocketRoom","findOneByName","is_general","rocketId","addImportIds","rocketUsers","member","members","creator","rocketUser","push","rocketUserCreator","rocketChannel","createRoom","e","_sleepForMs","console","log","roomUpdate","created","lastSetTopic","isEmpty","topic","last_set","purpose","addSlackChannel","slackUserID","Users","rocketUserData","isBot","is_bot","email","profile","existingRocketUser","findOneByEmailAddress","findOneByUsername","newUser","password","joinDefaultChannels","Accounts","createUser","userUpdate","utcOffset","tz_offset","roles","real_name","deleted","active","update","$set","url","image_original","image_512","setUserAvatar","importIds","bot_id","addAliasToMsg","rocketUserName","rocketMsgObj","alias","format","createAndSaveMessage","rocketMsgDataDefaults","isImporting","subtype","processSubtypedMessage","convertSlackMsgTxtToRocketTxtFormat","extend","edited","parseInt","split","fields","pinned_to","pinned","pinnedAt","now","pinnedBy","pick","setTimeout","findOneBySlackBotIdAndSlackTs","sendMessage","slackMsgTxt","match","http","https","slackClient","rtm","slackChannelRocketBotMembershipMap","RTMClient","start","populateMembershipChannelMap","on","bindEnvironment","reactionMsg","onReactionAdded","onReactionRemoved","channelLeftMsg","onChannelLeft","slackReactionMsg","findOneBySlackTs","rocketID","rocketReaction","reactions","theReaction","usernames","set","runAsUser","call","includes","removeSlackChannel","processMessageDeleted","processChannelJoin","processNewMessage","postGetChannelInfo","slackChID","response","postFindChannel","rocketChannelName","isArray","channels","is_member","groups","index","substr","slackTs","rocketChID","ch","family","keys","next","populateMembershipChannelMapByChannels","rocketchat_room","populateMembershipChannelMapByGroups","slackGroup","timestamp","postResult","post","statusCode","as_user","iconUrl","getAvatarUrlFromUsername","icon_url","link_names","setSlackBotIdAndSlackTs","rocketCh","url_private_download","undefined","permalink","msgDataDefaults","previous_message","deleteMessage","currentMsg","updateMessage","imported","code","processBotMessage","excludeBotNames","bot","icons","emoji","processMeMessage","processChannelJoinMessage","createUserJoinWithRoomIdAndUser","addUserToRoom","processGroupJoinMessage","inviter","createUserAddedWithRoomIdAndUser","processLeaveMessage","createUserLeaveWithRoomIdAndUser","removeUserFromRoom","processTopicMessage","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","saveRoomTopic","processPurposeMessage","processNameMessage","createRoomRenamedWithRoomIdRoomNameAndUser","saveRoomName","processShareMessage","details","message_id","size","mimetype","uploadFileFromSlack","processPinnedItemMessage","t","author_name","author_subname","author_icon","setPinnedByIdAndUserId","channel_id","archiveRoom","unarchiveRoom","slackFileURL","timeStamp","requestModule","parsedUrl","parse","headers","Authorization","stream","fileStore","FileUpload","getStore","insert","Error","title","image_url","image_type","image_size","image_dimensions","identify","audio_url","audio_type","audio_size","video_url","video_type","video_size","groupable","importFromHistory","options","messages","latest","reverse","has_more","copyChannelInfo","channelMap","topic_last_set","topic_creator","copyPins","items","pin","msgObj","callback","results","oldest","slack_room"],"mappings":"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","file":"/packages/rocketchat_slackbridge.js","sourcesContent":["/* globals logger:true */\n/* exported logger */\n\nlogger = new Logger('SlackBridge', {\n\tsections: {\n\t\tconnection: 'Connection',\n\t\tevents: 'Events',\n\t\tclass: 'Class',\n\t\tslack: 'Slack',\n\t\trocket: 'Rocket',\n\t},\n});\n","Meteor.startup(function() {\n\tRocketChat.settings.addGroup('SlackBridge', function() {\n\t\tthis.add('SlackBridge_Enabled', false, {\n\t\t\ttype: 'boolean',\n\t\t\ti18nLabel: 'Enabled',\n\t\t\tpublic: true,\n\t\t});\n\n\t\tthis.add('SlackBridge_APIToken', '', {\n\t\t\ttype: 'string',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true,\n\t\t\t},\n\t\t\ti18nLabel: 'API_Token',\n\t\t});\n\n\t\tthis.add('SlackBridge_FileUpload_Enabled', true, {\n\t\t\ttype: 'boolean',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true,\n\t\t\t},\n\t\t\ti18nLabel: 'FileUpload',\n\t\t});\n\n\t\tthis.add('SlackBridge_Out_Enabled', false, {\n\t\t\ttype: 'boolean',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true,\n\t\t\t},\n\t\t});\n\n\t\tthis.add('SlackBridge_Out_All', false, {\n\t\t\ttype: 'boolean',\n\t\t\tenableQuery: [{\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true,\n\t\t\t}, {\n\t\t\t\t_id: 'SlackBridge_Out_Enabled',\n\t\t\t\tvalue: true,\n\t\t\t}],\n\t\t});\n\n\t\tthis.add('SlackBridge_Out_Channels', '', {\n\t\t\ttype: 'roomPick',\n\t\t\tenableQuery: [{\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true,\n\t\t\t}, {\n\t\t\t\t_id: 'SlackBridge_Out_Enabled',\n\t\t\t\tvalue: true,\n\t\t\t}, {\n\t\t\t\t_id: 'SlackBridge_Out_All',\n\t\t\t\tvalue: false,\n\t\t\t}],\n\t\t});\n\n\t\tthis.add('SlackBridge_AliasFormat', '', {\n\t\t\ttype: 'string',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true,\n\t\t\t},\n\t\t\ti18nLabel: 'Alias_Format',\n\t\t\ti18nDescription: 'Alias_Format_Description',\n\t\t});\n\n\t\tthis.add('SlackBridge_ExcludeBotnames', '', {\n\t\t\ttype: 'string',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true,\n\t\t\t},\n\t\t\ti18nLabel: 'Exclude_Botnames',\n\t\t\ti18nDescription: 'Exclude_Botnames_Description',\n\t\t});\n\n\t\tthis.add('SlackBridge_Reactions_Enabled', true, {\n\t\t\ttype: 'boolean',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true,\n\t\t\t},\n\t\t\ti18nLabel: 'Reactions',\n\t\t});\n\t});\n});\n","/* globals logger */\n\nimport SlackAdapter from './SlackAdapter.js';\nimport RocketAdapter from './RocketAdapter.js';\n\n/**\n * SlackBridge interfaces between this Rocket installation and a remote Slack installation.\n */\nclass SlackBridge {\n\n\tconstructor() {\n\t\tthis.slack = new SlackAdapter(this);\n\t\tthis.rocket = new RocketAdapter(this);\n\t\tthis.reactionsMap = new Map();\t// Sync object between rocket and slack\n\n\t\tthis.connected = false;\n\t\tthis.rocket.setSlack(this.slack);\n\t\tthis.slack.setRocket(this.rocket);\n\n\t\t// Settings that we cache versus looking up at runtime\n\t\tthis.apiToken = false;\n\t\tthis.aliasFormat = '';\n\t\tthis.excludeBotnames = '';\n\t\tthis.isReactionsEnabled = true;\n\n\t\tthis.processSettings();\n\t}\n\n\tconnect() {\n\t\tif (this.connected === false) {\n\n\t\t\tthis.slack.connect(this.apiToken);\n\t\t\tif (RocketChat.settings.get('SlackBridge_Out_Enabled')) {\n\t\t\t\tthis.rocket.connect();\n\t\t\t}\n\n\t\t\tthis.connected = true;\n\t\t\tlogger.connection.info('Enabled');\n\t\t}\n\t}\n\n\tdisconnect() {\n\t\tif (this.connected === true) {\n\t\t\tthis.rocket.disconnect();\n\t\t\tthis.slack.disconnect();\n\t\t\tthis.connected = false;\n\t\t\tlogger.connection.info('Disabled');\n\t\t}\n\t}\n\n\tprocessSettings() {\n\t\t// Slack installation API token\n\t\tRocketChat.settings.get('SlackBridge_APIToken', (key, value) => {\n\t\t\tif (value !== this.apiToken) {\n\t\t\t\tthis.apiToken = value;\n\t\t\t\tif (this.connected) {\n\t\t\t\t\tthis.disconnect();\n\t\t\t\t\tthis.connect();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlogger.class.debug(`Setting: ${ key }`, value);\n\t\t});\n\n\t\t// Import messages from Slack with an alias; %s is replaced by the username of the user. If empty, no alias will be used.\n\t\tRocketChat.settings.get('SlackBridge_AliasFormat', (key, value) => {\n\t\t\tthis.aliasFormat = value;\n\t\t\tlogger.class.debug(`Setting: ${ key }`, value);\n\t\t});\n\n\t\t// Do not propagate messages from bots whose name matches the regular expression above. If left empty, all messages from bots will be propagated.\n\t\tRocketChat.settings.get('SlackBridge_ExcludeBotnames', (key, value) => {\n\t\t\tthis.excludeBotnames = value;\n\t\t\tlogger.class.debug(`Setting: ${ key }`, value);\n\t\t});\n\n\t\t// Reactions\n\t\tRocketChat.settings.get('SlackBridge_Reactions_Enabled', (key, value) => {\n\t\t\tthis.isReactionsEnabled = value;\n\t\t\tlogger.class.debug(`Setting: ${ key }`, value);\n\t\t});\n\n\t\t// Is this entire SlackBridge enabled\n\t\tRocketChat.settings.get('SlackBridge_Enabled', (key, value) => {\n\t\t\tif (value && this.apiToken) {\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.disconnect();\n\t\t\t}\n\t\t\tlogger.class.debug(`Setting: ${ key }`, value);\n\t\t});\n\t}\n}\n\nRocketChat.SlackBridge = new SlackBridge;\n","/* globals msgStream */\nfunction SlackBridgeImport(command, params, item) {\n\tif (command !== 'slackbridge-import' || !Match.test(params, String)) {\n\t\treturn;\n\t}\n\n\tconst room = RocketChat.models.Rooms.findOneById(item.rid);\n\tconst channel = room.name;\n\tconst user = Meteor.users.findOne(Meteor.userId());\n\n\tmsgStream.emit(item.rid, {\n\t\t_id: Random.id(),\n\t\trid: item.rid,\n\t\tu: { username: 'rocket.cat' },\n\t\tts: new Date(),\n\t\tmsg: TAPi18n.__('SlackBridge_start', {\n\t\t\tpostProcess: 'sprintf',\n\t\t\tsprintf: [user.username, channel],\n\t\t}, user.language),\n\t});\n\n\ttry {\n\t\tRocketChat.SlackBridge.importMessages(item.rid, (error) => {\n\t\t\tif (error) {\n\t\t\t\tmsgStream.emit(item.rid, {\n\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\trid: item.rid,\n\t\t\t\t\tu: { username: 'rocket.cat' },\n\t\t\t\t\tts: new Date(),\n\t\t\t\t\tmsg: TAPi18n.__('SlackBridge_error', {\n\t\t\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\t\t\tsprintf: [channel, error.message],\n\t\t\t\t\t}, user.language),\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tmsgStream.emit(item.rid, {\n\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\trid: item.rid,\n\t\t\t\t\tu: { username: 'rocket.cat' },\n\t\t\t\t\tts: new Date(),\n\t\t\t\t\tmsg: TAPi18n.__('SlackBridge_finish', {\n\t\t\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\t\t\tsprintf: [channel],\n\t\t\t\t\t}, user.language),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t} catch (error) {\n\t\tmsgStream.emit(item.rid, {\n\t\t\t_id: Random.id(),\n\t\t\trid: item.rid,\n\t\t\tu: { username: 'rocket.cat' },\n\t\t\tts: new Date(),\n\t\t\tmsg: TAPi18n.__('SlackBridge_error', {\n\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\tsprintf: [channel, error.message],\n\t\t\t}, user.language),\n\t\t});\n\t\tthrow error;\n\t}\n\treturn SlackBridgeImport;\n}\n\nRocketChat.slashCommands.add('slackbridge-import', SlackBridgeImport);\n","/* globals logger*/\n\nimport _ from 'underscore';\n\nexport default class RocketAdapter {\n\tconstructor(slackBridge) {\n\t\tlogger.rocket.debug('constructor');\n\t\tthis.slackBridge = slackBridge;\n\t\tthis.util = Npm.require('util');\n\n\t\tthis.userTags = {};\n\t\tthis.slack = {};\n\t}\n\n\tconnect() {\n\t\tthis.registerForEvents();\n\t}\n\n\tdisconnect() {\n\t\tthis.unregisterForEvents();\n\t}\n\n\tsetSlack(slack) {\n\t\tthis.slack = slack;\n\t}\n\n\tregisterForEvents() {\n\t\tlogger.rocket.debug('Register for events');\n\t\tRocketChat.callbacks.add('afterSaveMessage', this.onMessage.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_Out');\n\t\tRocketChat.callbacks.add('afterDeleteMessage', this.onMessageDelete.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_Delete');\n\t\tRocketChat.callbacks.add('setReaction', this.onSetReaction.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_SetReaction');\n\t\tRocketChat.callbacks.add('unsetReaction', this.onUnSetReaction.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_UnSetReaction');\n\t}\n\n\tunregisterForEvents() {\n\t\tlogger.rocket.debug('Unregister for events');\n\t\tRocketChat.callbacks.remove('afterSaveMessage', 'SlackBridge_Out');\n\t\tRocketChat.callbacks.remove('afterDeleteMessage', 'SlackBridge_Delete');\n\t\tRocketChat.callbacks.remove('setReaction', 'SlackBridge_SetReaction');\n\t\tRocketChat.callbacks.remove('unsetReaction', 'SlackBridge_UnSetReaction');\n\t}\n\n\tonMessageDelete(rocketMessageDeleted) {\n\t\ttry {\n\t\t\tif (! this.slack.getSlackChannel(rocketMessageDeleted.rid)) {\n\t\t\t\t// This is on a channel that the rocket bot is not subscribed\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlogger.rocket.debug('onRocketMessageDelete', rocketMessageDeleted);\n\n\t\t\tthis.slack.postDeleteMessage(rocketMessageDeleted);\n\t\t} catch (err) {\n\t\t\tlogger.rocket.error('Unhandled error onMessageDelete', err);\n\t\t}\n\t}\n\n\tonSetReaction(rocketMsgID, reaction) {\n\t\ttry {\n\t\t\tif (!this.slackBridge.isReactionsEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlogger.rocket.debug('onRocketSetReaction');\n\n\t\t\tif (rocketMsgID && reaction) {\n\t\t\t\tif (this.slackBridge.reactionsMap.delete(`set${ rocketMsgID }${ reaction }`)) {\n\t\t\t\t\t// This was a Slack reaction, we don't need to tell Slack about it\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst rocketMsg = RocketChat.models.Messages.findOneById(rocketMsgID);\n\t\t\t\tif (rocketMsg) {\n\t\t\t\t\tconst slackChannel = this.slack.getSlackChannel(rocketMsg.rid);\n\t\t\t\t\tif (null != slackChannel) {\n\t\t\t\t\t\tconst slackTS = this.slack.getTimeStamp(rocketMsg);\n\t\t\t\t\t\tthis.slack.postReactionAdded(reaction.replace(/:/g, ''), slackChannel.id, slackTS);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tlogger.rocket.error('Unhandled error onSetReaction', err);\n\t\t}\n\t}\n\n\tonUnSetReaction(rocketMsgID, reaction) {\n\t\ttry {\n\t\t\tif (!this.slackBridge.isReactionsEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlogger.rocket.debug('onRocketUnSetReaction');\n\n\t\t\tif (rocketMsgID && reaction) {\n\t\t\t\tif (this.slackBridge.reactionsMap.delete(`unset${ rocketMsgID }${ reaction }`)) {\n\t\t\t\t\t// This was a Slack unset reaction, we don't need to tell Slack about it\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst rocketMsg = RocketChat.models.Messages.findOneById(rocketMsgID);\n\t\t\t\tif (rocketMsg) {\n\t\t\t\t\tconst slackChannel = this.slack.getSlackChannel(rocketMsg.rid);\n\t\t\t\t\tif (null != slackChannel) {\n\t\t\t\t\t\tconst slackTS = this.slack.getTimeStamp(rocketMsg);\n\t\t\t\t\t\tthis.slack.postReactionRemove(reaction.replace(/:/g, ''), slackChannel.id, slackTS);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tlogger.rocket.error('Unhandled error onUnSetReaction', err);\n\t\t}\n\t}\n\n\tonMessage(rocketMessage) {\n\t\ttry {\n\t\t\tif (! this.slack.getSlackChannel(rocketMessage.rid)) {\n\t\t\t\t// This is on a channel that the rocket bot is not subscribed\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlogger.rocket.debug('onRocketMessage', rocketMessage);\n\n\t\t\tif (rocketMessage.editedAt) {\n\t\t\t\t// This is an Edit Event\n\t\t\t\tthis.processMessageChanged(rocketMessage);\n\t\t\t\treturn rocketMessage;\n\t\t\t}\n\t\t\t// Ignore messages originating from Slack\n\t\t\tif (rocketMessage._id.indexOf('slack-') === 0) {\n\t\t\t\treturn rocketMessage;\n\t\t\t}\n\n\t\t\tif (rocketMessage.file) {\n\t\t\t\treturn this.processFileShare(rocketMessage);\n\t\t\t}\n\n\t\t\t// A new message from Rocket.Chat\n\t\t\tthis.processSendMessage(rocketMessage);\n\t\t} catch (err) {\n\t\t\tlogger.rocket.error('Unhandled error onMessage', err);\n\t\t}\n\n\t\treturn rocketMessage;\n\t}\n\n\tprocessSendMessage(rocketMessage) {\n\t\t// Since we got this message, SlackBridge_Out_Enabled is true\n\n\t\tif (RocketChat.settings.get('SlackBridge_Out_All') === true) {\n\t\t\tthis.slack.postMessage(this.slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n\t\t} else {\n\t\t\t// They want to limit to certain groups\n\t\t\tconst outSlackChannels = _.pluck(RocketChat.settings.get('SlackBridge_Out_Channels'), '_id') || [];\n\t\t\t// logger.rocket.debug('Out SlackChannels: ', outSlackChannels);\n\t\t\tif (outSlackChannels.indexOf(rocketMessage.rid) !== -1) {\n\t\t\t\tthis.slack.postMessage(this.slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetMessageAttachment(rocketMessage) {\n\t\tif (!rocketMessage.file) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!rocketMessage.attachments || !rocketMessage.attachments.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fileId = rocketMessage.file._id;\n\t\treturn rocketMessage.attachments.find((attachment) => attachment.title_link && attachment.title_link.indexOf(`/${ fileId }/`) >= 0);\n\t}\n\n\tgetFileDownloadUrl(rocketMessage) {\n\t\tconst attachment = this.getMessageAttachment(rocketMessage);\n\n\t\tif (attachment) {\n\t\t\treturn attachment.title_link;\n\t\t}\n\t}\n\n\tprocessFileShare(rocketMessage) {\n\t\tif (! RocketChat.settings.get('SlackBridge_FileUpload_Enabled')) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (rocketMessage.file.name) {\n\t\t\tlet file_name = rocketMessage.file.name;\n\t\t\tlet text = rocketMessage.msg;\n\n\t\t\tconst attachment = this.getMessageAttachment(rocketMessage);\n\t\t\tif (attachment) {\n\t\t\t\tfile_name = Meteor.absoluteUrl(attachment.title_link);\n\t\t\t\tif (!text) {\n\t\t\t\t\ttext = attachment.description;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst message = `${ text } ${ file_name }`;\n\n\t\t\trocketMessage.msg = message;\n\t\t\tthis.slack.postMessage(this.slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n\t\t}\n\t}\n\n\tprocessMessageChanged(rocketMessage) {\n\t\tif (rocketMessage) {\n\t\t\tif (rocketMessage.updatedBySlack) {\n\t\t\t\t// We have already processed this\n\t\t\t\tdelete rocketMessage.updatedBySlack;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// This was a change from Rocket.Chat\n\t\t\tconst slackChannel = this.slack.getSlackChannel(rocketMessage.rid);\n\t\t\tthis.slack.postMessageUpdate(slackChannel, rocketMessage);\n\t\t}\n\t}\n\n\tgetChannel(slackMessage) {\n\t\treturn slackMessage.channel ? this.findChannel(slackMessage.channel) || this.addChannel(slackMessage.channel) : null;\n\t}\n\n\tgetUser(slackUser) {\n\t\treturn slackUser ? this.findUser(slackUser) || this.addUser(slackUser) : null;\n\t}\n\n\tcreateRocketID(slackChannel, ts) {\n\t\treturn `slack-${ slackChannel }-${ ts.replace(/\\./g, '-') }`;\n\t}\n\n\tfindChannel(slackChannelId) {\n\t\treturn RocketChat.models.Rooms.findOneByImportId(slackChannelId);\n\t}\n\n\taddChannel(slackChannelID, hasRetried = false) {\n\t\tlogger.rocket.debug('Adding Rocket.Chat channel from Slack', slackChannelID);\n\t\tlet slackResults = null;\n\t\tlet isGroup = false;\n\t\tif (slackChannelID.charAt(0) === 'C') {\n\t\t\tslackResults = HTTP.get('https://slack.com/api/channels.info', { params: { token: this.slackBridge.apiToken, channel: slackChannelID } });\n\t\t} else if (slackChannelID.charAt(0) === 'G') {\n\t\t\tslackResults = HTTP.get('https://slack.com/api/groups.info', { params: { token: this.slackBridge.apiToken, channel: slackChannelID } });\n\t\t\tisGroup = true;\n\t\t}\n\t\tif (slackResults && slackResults.data && slackResults.data.ok === true) {\n\t\t\tconst rocketChannelData = isGroup ? slackResults.data.group : slackResults.data.channel;\n\t\t\tconst existingRocketRoom = RocketChat.models.Rooms.findOneByName(rocketChannelData.name);\n\n\t\t\t// If the room exists, make sure we have its id in importIds\n\t\t\tif (existingRocketRoom || rocketChannelData.is_general) {\n\t\t\t\trocketChannelData.rocketId = rocketChannelData.is_general ? 'GENERAL' : existingRocketRoom._id;\n\t\t\t\tRocketChat.models.Rooms.addImportIds(rocketChannelData.rocketId, rocketChannelData.id);\n\t\t\t} else {\n\t\t\t\tconst rocketUsers = [];\n\t\t\t\tfor (const member of rocketChannelData.members) {\n\t\t\t\t\tif (member !== rocketChannelData.creator) {\n\t\t\t\t\t\tconst rocketUser = this.findUser(member) || this.addUser(member);\n\t\t\t\t\t\tif (rocketUser && rocketUser.username) {\n\t\t\t\t\t\t\trocketUsers.push(rocketUser.username);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst rocketUserCreator = rocketChannelData.creator ? this.findUser(rocketChannelData.creator) || this.addUser(rocketChannelData.creator) : null;\n\t\t\t\tif (!rocketUserCreator) {\n\t\t\t\t\tlogger.rocket.error('Could not fetch room creator information', rocketChannelData.creator);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst rocketChannel = RocketChat.createRoom(isGroup ? 'p' : 'c', rocketChannelData.name, rocketUserCreator.username, rocketUsers);\n\t\t\t\t\trocketChannelData.rocketId = rocketChannel.rid;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (!hasRetried) {\n\t\t\t\t\t\tlogger.rocket.debug('Error adding channel from Slack. Will retry in 1s.', e.message);\n\t\t\t\t\t\t// If first time trying to create channel fails, could be because of multiple messages received at the same time. Try again once after 1s.\n\t\t\t\t\t\tMeteor._sleepForMs(1000);\n\t\t\t\t\t\treturn this.findChannel(slackChannelID) || this.addChannel(slackChannelID, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(e.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst roomUpdate = {\n\t\t\t\t\tts: new Date(rocketChannelData.created * 1000),\n\t\t\t\t};\n\t\t\t\tlet lastSetTopic = 0;\n\t\t\t\tif (!_.isEmpty(rocketChannelData.topic && rocketChannelData.topic.value)) {\n\t\t\t\t\troomUpdate.topic = rocketChannelData.topic.value;\n\t\t\t\t\tlastSetTopic = rocketChannelData.topic.last_set;\n\t\t\t\t}\n\t\t\t\tif (!_.isEmpty(rocketChannelData.purpose && rocketChannelData.purpose.value) && rocketChannelData.purpose.last_set > lastSetTopic) {\n\t\t\t\t\troomUpdate.topic = rocketChannelData.purpose.value;\n\t\t\t\t}\n\t\t\t\tRocketChat.models.Rooms.addImportIds(rocketChannelData.rocketId, rocketChannelData.id);\n\t\t\t\tthis.slack.addSlackChannel(rocketChannelData.rocketId, slackChannelID);\n\t\t\t}\n\t\t\treturn RocketChat.models.Rooms.findOneById(rocketChannelData.rocketId);\n\t\t}\n\t\tlogger.rocket.debug('Channel not added');\n\t\treturn;\n\t}\n\n\tfindUser(slackUserID) {\n\t\tconst rocketUser = RocketChat.models.Users.findOneByImportId(slackUserID);\n\t\tif (rocketUser && !this.userTags[slackUserID]) {\n\t\t\tthis.userTags[slackUserID] = { slack: `<@${ slackUserID }>`, rocket: `@${ rocketUser.username }` };\n\t\t}\n\t\treturn rocketUser;\n\t}\n\n\taddUser(slackUserID) {\n\t\tlogger.rocket.debug('Adding Rocket.Chat user from Slack', slackUserID);\n\t\tconst slackResults = HTTP.get('https://slack.com/api/users.info', { params: { token: this.slackBridge.apiToken, user: slackUserID } });\n\t\tif (slackResults && slackResults.data && slackResults.data.ok === true && slackResults.data.user) {\n\t\t\tconst rocketUserData = slackResults.data.user;\n\t\t\tconst isBot = rocketUserData.is_bot === true;\n\t\t\tconst email = (rocketUserData.profile && rocketUserData.profile.email) || '';\n\t\t\tlet existingRocketUser;\n\t\t\tif (!isBot) {\n\t\t\t\texistingRocketUser = RocketChat.models.Users.findOneByEmailAddress(email) || RocketChat.models.Users.findOneByUsername(rocketUserData.name);\n\t\t\t} else {\n\t\t\t\texistingRocketUser = RocketChat.models.Users.findOneByUsername(rocketUserData.name);\n\t\t\t}\n\n\t\t\tif (existingRocketUser) {\n\t\t\t\trocketUserData.rocketId = existingRocketUser._id;\n\t\t\t\trocketUserData.name = existingRocketUser.username;\n\t\t\t} else {\n\t\t\t\tconst newUser = {\n\t\t\t\t\tpassword: Random.id(),\n\t\t\t\t\tusername: rocketUserData.name,\n\t\t\t\t};\n\n\t\t\t\tif (!isBot && email) {\n\t\t\t\t\tnewUser.email = email;\n\t\t\t\t}\n\n\t\t\t\tif (isBot) {\n\t\t\t\t\tnewUser.joinDefaultChannels = false;\n\t\t\t\t}\n\n\t\t\t\trocketUserData.rocketId = Accounts.createUser(newUser);\n\t\t\t\tconst userUpdate = {\n\t\t\t\t\tutcOffset: rocketUserData.tz_offset / 3600, // Slack's is -18000 which translates to Rocket.Chat's after dividing by 3600,\n\t\t\t\t\troles: isBot ? ['bot'] : ['user'],\n\t\t\t\t};\n\n\t\t\t\tif (rocketUserData.profile && rocketUserData.profile.real_name) {\n\t\t\t\t\tuserUpdate.name = rocketUserData.profile.real_name;\n\t\t\t\t}\n\n\t\t\t\tif (rocketUserData.deleted) {\n\t\t\t\t\tuserUpdate.active = false;\n\t\t\t\t\tuserUpdate['services.resume.loginTokens'] = [];\n\t\t\t\t}\n\n\t\t\t\tRocketChat.models.Users.update({ _id: rocketUserData.rocketId }, { $set: userUpdate });\n\n\t\t\t\tconst user = RocketChat.models.Users.findOneById(rocketUserData.rocketId);\n\n\t\t\t\tlet url = null;\n\t\t\t\tif (rocketUserData.profile) {\n\t\t\t\t\tif (rocketUserData.profile.image_original) {\n\t\t\t\t\t\turl = rocketUserData.profile.image_original;\n\t\t\t\t\t} else if (rocketUserData.profile.image_512) {\n\t\t\t\t\t\turl = rocketUserData.profile.image_512;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (url) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tRocketChat.setUserAvatar(user, url, null, 'url');\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlogger.rocket.debug('Error setting user avatar', error.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst importIds = [rocketUserData.id];\n\t\t\tif (isBot && rocketUserData.profile && rocketUserData.profile.bot_id) {\n\t\t\t\timportIds.push(rocketUserData.profile.bot_id);\n\t\t\t}\n\t\t\tRocketChat.models.Users.addImportIds(rocketUserData.rocketId, importIds);\n\t\t\tif (!this.userTags[slackUserID]) {\n\t\t\t\tthis.userTags[slackUserID] = { slack: `<@${ slackUserID }>`, rocket: `@${ rocketUserData.name }` };\n\t\t\t}\n\t\t\treturn RocketChat.models.Users.findOneById(rocketUserData.rocketId);\n\t\t}\n\t\tlogger.rocket.debug('User not added');\n\t\treturn;\n\t}\n\n\taddAliasToMsg(rocketUserName, rocketMsgObj) {\n\t\tconst aliasFormat = RocketChat.settings.get('SlackBridge_AliasFormat');\n\t\tif (aliasFormat) {\n\t\t\tconst alias = this.util.format(aliasFormat, rocketUserName);\n\n\t\t\tif (alias !== rocketUserName) {\n\t\t\t\trocketMsgObj.alias = alias;\n\t\t\t}\n\t\t}\n\n\t\treturn rocketMsgObj;\n\t}\n\n\tcreateAndSaveMessage(rocketChannel, rocketUser, slackMessage, rocketMsgDataDefaults, isImporting) {\n\t\tif (slackMessage.type === 'message') {\n\t\t\tlet rocketMsgObj = {};\n\t\t\tif (!_.isEmpty(slackMessage.subtype)) {\n\t\t\t\trocketMsgObj = this.slack.processSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\t\tif (!rocketMsgObj) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trocketMsgObj = {\n\t\t\t\t\tmsg: this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tu: {\n\t\t\t\t\t\t_id: rocketUser._id,\n\t\t\t\t\t\tusername: rocketUser.username,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tthis.addAliasToMsg(rocketUser.username, rocketMsgObj);\n\t\t\t}\n\t\t\t_.extend(rocketMsgObj, rocketMsgDataDefaults);\n\t\t\tif (slackMessage.edited) {\n\t\t\t\trocketMsgObj.editedAt = new Date(parseInt(slackMessage.edited.ts.split('.')[0]) * 1000);\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\trocketUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\t\t\t}\n\n\t\t\tif (slackMessage.pinned_to && slackMessage.pinned_to.indexOf(slackMessage.channel) !== -1) {\n\t\t\t\trocketMsgObj.pinned = true;\n\t\t\t\trocketMsgObj.pinnedAt = Date.now;\n\t\t\t\trocketMsgObj.pinnedBy = _.pick(rocketUser, '_id', 'username');\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\tMeteor.setTimeout(() => {\n\t\t\t\t\tif (slackMessage.bot_id && slackMessage.ts && !RocketChat.models.Messages.findOneBySlackBotIdAndSlackTs(slackMessage.bot_id, slackMessage.ts)) {\n\t\t\t\t\t\tRocketChat.sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n\t\t\t\t\t}\n\t\t\t\t}, 500);\n\t\t\t} else {\n\t\t\t\tlogger.rocket.debug('Send message to Rocket.Chat');\n\t\t\t\tRocketChat.sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tconvertSlackMsgTxtToRocketTxtFormat(slackMsgTxt) {\n\t\tif (!_.isEmpty(slackMsgTxt)) {\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!everyone>/g, '@all');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!channel>/g, '@all');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!here>/g, '@here');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&gt;/g, '>');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&lt;/g, '<');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&amp;/g, '&');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:simple_smile:/g, ':smile:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:memo:/g, ':pencil:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:piggy:/g, ':pig:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:uk:/g, ':gb:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<(http[s]?:[^>]*)>/g, '$1');\n\n\t\t\tslackMsgTxt.replace(/(?:<@)([a-zA-Z0-9]+)(?:\\|.+)?(?:>)/g, (match, userId) => {\n\t\t\t\tif (!this.userTags[userId]) {\n\t\t\t\t\tthis.findUser(userId) || this.addUser(userId); // This adds userTags for the userId\n\t\t\t\t}\n\t\t\t\tconst userTags = this.userTags[userId];\n\t\t\t\tif (userTags) {\n\t\t\t\t\tslackMsgTxt = slackMsgTxt.replace(userTags.slack, userTags.rocket);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tslackMsgTxt = '';\n\t\t}\n\t\treturn slackMsgTxt;\n\t}\n\n}\n","/* globals logger*/\nimport _ from 'underscore';\nimport url from 'url';\nimport http from 'http';\nimport https from 'https';\n\n\nexport default class SlackAdapter {\n\n\tconstructor(slackBridge) {\n\t\tlogger.slack.debug('constructor');\n\t\tthis.slackBridge = slackBridge;\n\t\tthis.slackClient = require('@slack/client');\n\t\tthis.rtm = {};\t// slack-client Real Time Messaging API\n\t\tthis.apiToken = {};\t// Slack API Token passed in via Connect\n\t\t// On Slack, a rocket integration bot will be added to slack channels, this is the list of those channels, key is Rocket Ch ID\n\t\tthis.slackChannelRocketBotMembershipMap = new Map(); // Key=RocketChannelID, Value=SlackChannel\n\t\tthis.rocket = {};\n\t}\n\n\t/**\n\t * Connect to the remote Slack server using the passed in token API and register for Slack events\n\t * @param apiToken\n\t */\n\tconnect(apiToken) {\n\t\tthis.apiToken = apiToken;\n\n\t\tconst { RTMClient } = this.slackClient;\n\t\tif (RTMClient != null) {\n\t\t\tRTMClient.disconnect;\n\t\t}\n\t\tthis.rtm = new RTMClient(this.apiToken);\n\t\tthis.rtm.start();\n\t\tthis.registerForEvents();\n\n\t\tMeteor.startup(() => {\n\t\t\ttry {\n\t\t\t\tthis.populateMembershipChannelMap(); // If run outside of Meteor.startup, HTTP is not defined\n\t\t\t} catch (err) {\n\t\t\t\tlogger.slack.error('Error attempting to connect to Slack', err);\n\t\t\t\tthis.slackBridge.disconnect();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Unregister for slack events and disconnect from Slack\n\t */\n\tdisconnect() {\n\t\tthis.rtm.disconnect && this.rtm.disconnect;\n\t}\n\n\tsetRocket(rocket) {\n\t\tthis.rocket = rocket;\n\t}\n\n\tregisterForEvents() {\n\t\tlogger.slack.debug('Register for events');\n\t\tthis.rtm.on('authenticated', () => {\n\t\t\tlogger.slack.info('Connected to Slack');\n\t\t});\n\n\t\tthis.rtm.on('unable_to_rtm_start', () => {\n\t\t\tthis.slackBridge.disconnect();\n\t\t});\n\n\t\tthis.rtm.on('disconnected', () => {\n\t\t\tlogger.slack.info('Disconnected from Slack');\n\t\t\tthis.slackBridge.disconnect();\n\t\t});\n\n\t\t/**\n\t\t* Event fired when someone messages a channel the bot is in\n\t\t* {\n\t\t*\ttype: 'message',\n\t\t* \tchannel: [channel_id],\n\t\t* \tuser: [user_id],\n\t\t* \ttext: [message],\n\t\t* \tts: [ts.milli],\n\t\t* \tteam: [team_id],\n\t\t* \tsubtype: [message_subtype],\n\t\t* \tinviter: [message_subtype = 'group_join|channel_join' -> user_id]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on('message', Meteor.bindEnvironment((slackMessage) => {\n\t\t\tlogger.slack.debug('OnSlackEvent-MESSAGE: ', slackMessage);\n\t\t\tif (slackMessage) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.onMessage(slackMessage);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.slack.error('Unhandled error onMessage', err);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.rtm.on('reaction_added', Meteor.bindEnvironment((reactionMsg) => {\n\t\t\tlogger.slack.debug('OnSlackEvent-REACTION_ADDED: ', reactionMsg);\n\t\t\tif (reactionMsg) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.onReactionAdded(reactionMsg);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.slack.error('Unhandled error onReactionAdded', err);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.rtm.on('reaction_removed', Meteor.bindEnvironment((reactionMsg) => {\n\t\t\tlogger.slack.debug('OnSlackEvent-REACTION_REMOVED: ', reactionMsg);\n\t\t\tif (reactionMsg) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.onReactionRemoved(reactionMsg);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.slack.error('Unhandled error onReactionRemoved', err);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t/**\n\t\t * Event fired when someone creates a public channel\n\t\t * {\n\t\t*\ttype: 'channel_created',\n\t\t*\tchannel: {\n\t\t*\t\tid: [channel_id],\n\t\t*\t\tis_channel: true,\n\t\t*\t\tname: [channel_name],\n\t\t*\t\tcreated: [ts],\n\t\t*\t\tcreator: [user_id],\n\t\t*\t\tis_shared: false,\n\t\t*\t\tis_org_shared: false\n\t\t*\t},\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('channel_created', Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t * Event fired when the bot joins a public channel\n\t\t * {\n\t\t* \ttype: 'channel_joined',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_channel: true,\n\t\t* \t\tcreated: [ts],\n\t\t* \t\tcreator: [user_id],\n\t\t* \t\tis_archived: false,\n\t\t* \t\tis_general: false,\n\t\t* \t\tis_member: true,\n\t\t* \t\tlast_read: [ts.milli],\n\t\t* \t\tlatest: [message_obj],\n\t\t* \t\tunread_count: 0,\n\t\t* \t\tunread_count_display: 0,\n\t\t* \t\tmembers: [ user_ids ],\n\t\t* \t\ttopic: {\n\t\t* \t\t\tvalue: [channel_topic],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t},\n\t\t* \t\tpurpose: {\n\t\t* \t\t\tvalue: [channel_purpose],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t}\n\t\t* \t}\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('channel_joined', Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t * Event fired when the bot leaves (or is removed from) a public channel\n\t\t * {\n\t\t* \ttype: 'channel_left',\n\t\t* \tchannel: [channel_id]\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('channel_left', Meteor.bindEnvironment((channelLeftMsg) => {\n\t\t\tlogger.slack.debug('OnSlackEvent-CHANNEL_LEFT: ', channelLeftMsg);\n\t\t\tif (channelLeftMsg) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.onChannelLeft(channelLeftMsg);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.slack.error('Unhandled error onChannelLeft', err);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t}));\n\n\t\t/**\n\t\t * Event fired when an archived channel is deleted by an admin\n\t\t * {\n\t\t* \ttype: 'channel_deleted',\n\t\t* \tchannel: [channel_id],\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('channel_deleted', Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t * Event fired when the channel has its name changed\n\t\t * {\n\t\t* \ttype: 'channel_rename',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_channel: true,\n\t\t* \t\tcreated: [ts]\n\t\t* \t},\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('channel_rename', Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t * Event fired when the bot joins a private channel\n\t\t * {\n\t\t* \ttype: 'group_joined',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_group: true,\n\t\t* \t\tcreated: [ts],\n\t\t* \t\tcreator: [user_id],\n\t\t* \t\tis_archived: false,\n\t\t* \t\tis_mpim: false,\n\t\t* \t\tis_open: true,\n\t\t* \t\tlast_read: [ts.milli],\n\t\t* \t\tlatest: [message_obj],\n\t\t* \t\tunread_count: 0,\n\t\t* \t\tunread_count_display: 0,\n\t\t* \t\tmembers: [ user_ids ],\n\t\t* \t\ttopic: {\n\t\t* \t\t\tvalue: [channel_topic],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t},\n\t\t* \t\tpurpose: {\n\t\t* \t\t\tvalue: [channel_purpose],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t}\n\t\t* \t}\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('group_joined', Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t * Event fired when the bot leaves (or is removed from) a private channel\n\t\t * {\n\t\t* \ttype: 'group_left',\n\t\t* \tchannel: [channel_id]\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('group_left', Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t * Event fired when the private channel has its name changed\n\t\t * {\n\t\t* \ttype: 'group_rename',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_group: true,\n\t\t* \t\tcreated: [ts]\n\t\t* \t},\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('group_rename', Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t * Event fired when a new user joins the team\n\t\t * {\n\t\t* \ttype: 'team_join',\n\t\t* \tuser:\n\t\t* \t{\n\t\t* \t\tid: [user_id],\n\t\t* \t\tteam_id: [team_id],\n\t\t* \t\tname: [user_name],\n\t\t* \t\tdeleted: false,\n\t\t* \t\tstatus: null,\n\t\t* \t\tcolor: [color_code],\n\t\t* \t\treal_name: '',\n\t\t* \t\ttz: [timezone],\n\t\t* \t\ttz_label: [timezone_label],\n\t\t* \t\ttz_offset: [timezone_offset],\n\t\t* \t\tprofile:\n\t\t* \t\t{\n\t\t* \t\t\tavatar_hash: '',\n\t\t* \t\t\treal_name: '',\n\t\t* \t\t\treal_name_normalized: '',\n\t\t* \t\t\temail: '',\n\t\t* \t\t\timage_24: '',\n\t\t* \t\t\timage_32: '',\n\t\t* \t\t\timage_48: '',\n\t\t* \t\t\timage_72: '',\n\t\t* \t\t\timage_192: '',\n\t\t* \t\t\timage_512: '',\n\t\t* \t\t\tfields: null\n\t\t* \t\t},\n\t\t* \t\tis_admin: false,\n\t\t* \t\tis_owner: false,\n\t\t* \t\tis_primary_owner: false,\n\t\t* \t\tis_restricted: false,\n\t\t* \t\tis_ultra_restricted: false,\n\t\t* \t\tis_bot: false,\n\t\t* \t\tpresence: [user_presence]\n\t\t* \t},\n\t\t* \tcache_ts: [ts]\n\t\t* }\n\t\t **/\n\t\tthis.rtm.on('team_join', Meteor.bindEnvironment(() => {}));\n\t}\n\n\t/*\n\t https://api.slack.com/events/reaction_removed\n\t */\n\tonReactionRemoved(slackReactionMsg) {\n\t\tif (slackReactionMsg) {\n\t\t\tif (! this.slackBridge.isReactionsEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rocketUser = this.rocket.getUser(slackReactionMsg.user);\n\t\t\t// Lets find our Rocket originated message\n\t\t\tlet rocketMsg = RocketChat.models.Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n\t\t\tif (!rocketMsg) {\n\t\t\t\t// Must have originated from Slack\n\t\t\t\tconst rocketID = this.rocket.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n\t\t\t\trocketMsg = RocketChat.models.Messages.findOneById(rocketID);\n\t\t\t}\n\n\t\t\tif (rocketMsg && rocketUser) {\n\t\t\t\tconst rocketReaction = `:${ slackReactionMsg.reaction }:`;\n\n\t\t\t\t// If the Rocket user has already been removed, then this is an echo back from slack\n\t\t\t\tif (rocketMsg.reactions) {\n\t\t\t\t\tconst theReaction = rocketMsg.reactions[rocketReaction];\n\t\t\t\t\tif (theReaction) {\n\t\t\t\t\t\tif (theReaction.usernames.indexOf(rocketUser.username) === -1) {\n\t\t\t\t\t\t\treturn; // Reaction already removed\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Reaction already removed\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Stash this away to key off it later so we don't send it back to Slack\n\t\t\t\tthis.slackBridge.reactionsMap.set(`unset${ rocketMsg._id }${ rocketReaction }`, rocketUser);\n\t\t\t\tlogger.slack.debug('Removing reaction from Slack');\n\t\t\t\tMeteor.runAsUser(rocketUser._id, () => {\n\t\t\t\t\tMeteor.call('setReaction', rocketReaction, rocketMsg._id);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/reaction_added\n\t */\n\tonReactionAdded(slackReactionMsg) {\n\t\tif (slackReactionMsg) {\n\t\t\tif (! this.slackBridge.isReactionsEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rocketUser = this.rocket.getUser(slackReactionMsg.user);\n\n\t\t\tif (rocketUser.roles.includes('bot')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Lets find our Rocket originated message\n\t\t\tlet rocketMsg = RocketChat.models.Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n\t\t\tif (!rocketMsg) {\n\t\t\t\t// Must have originated from Slack\n\t\t\t\tconst rocketID = this.rocket.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n\t\t\t\trocketMsg = RocketChat.models.Messages.findOneById(rocketID);\n\t\t\t}\n\n\t\t\tif (rocketMsg && rocketUser) {\n\t\t\t\tconst rocketReaction = `:${ slackReactionMsg.reaction }:`;\n\n\t\t\t\t// If the Rocket user has already reacted, then this is Slack echoing back to us\n\t\t\t\tif (rocketMsg.reactions) {\n\t\t\t\t\tconst theReaction = rocketMsg.reactions[rocketReaction];\n\t\t\t\t\tif (theReaction) {\n\t\t\t\t\t\tif (theReaction.usernames.indexOf(rocketUser.username) !== -1) {\n\t\t\t\t\t\t\treturn; // Already reacted\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Stash this away to key off it later so we don't send it back to Slack\n\t\t\t\tthis.slackBridge.reactionsMap.set(`set${ rocketMsg._id }${ rocketReaction }`, rocketUser);\n\t\t\t\tlogger.slack.debug('Adding reaction from Slack');\n\t\t\t\tMeteor.runAsUser(rocketUser._id, () => {\n\t\t\t\t\tMeteor.call('setReaction', rocketReaction, rocketMsg._id);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tonChannelLeft(channelLeftMsg) {\n\t\tthis.removeSlackChannel(channelLeftMsg.channel);\n\t}\n\t/**\n\t * We have received a message from slack and we need to save/delete/update it into rocket\n\t * https://api.slack.com/events/message\n\t */\n\tonMessage(slackMessage, isImporting) {\n\t\tif (slackMessage.subtype) {\n\t\t\tswitch (slackMessage.subtype) {\n\t\t\t\tcase 'message_deleted':\n\t\t\t\t\tthis.processMessageDeleted(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'message_changed':\n\t\t\t\t\tthis.processMessageChanged(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'channel_join':\n\t\t\t\t\tthis.processChannelJoin(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'file_share':\n\t\t\t\t\tthis.processFileShare(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// Keeping backwards compatability for now, refactor later\n\t\t\t\t\tthis.processNewMessage(slackMessage, isImporting);\n\t\t\t}\n\t\t} else {\n\t\t\t// Simple message\n\t\t\tthis.processNewMessage(slackMessage, isImporting);\n\t\t}\n\t}\n\n\tpostGetChannelInfo(slackChID) {\n\t\tlogger.slack.debug('Getting slack channel info', slackChID);\n\t\tconst response = HTTP.get('https://slack.com/api/channels.info', { params: { token: this.apiToken, channel: slackChID } });\n\t\tif (response && response.data) {\n\t\t\treturn response.data.channel;\n\t\t}\n\t}\n\n\tpostFindChannel(rocketChannelName) {\n\t\tlogger.slack.debug('Searching for Slack channel or group', rocketChannelName);\n\t\tlet response = HTTP.get('https://slack.com/api/channels.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.channels) && response.data.channels.length > 0) {\n\t\t\tfor (const channel of response.data.channels) {\n\t\t\t\tif (channel.name === rocketChannelName && channel.is_member === true) {\n\t\t\t\t\treturn channel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponse = HTTP.get('https://slack.com/api/groups.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.groups) && response.data.groups.length > 0) {\n\t\t\tfor (const group of response.data.groups) {\n\t\t\t\tif (group.name === rocketChannelName) {\n\t\t\t\t\treturn group;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the Slack TS from a Rocket msg that originated from Slack\n\t * @param rocketMsg\n\t * @returns Slack TS or undefined if not a message that originated from slack\n\t * @private\n\t */\n\tgetTimeStamp(rocketMsg) {\n\t\t// slack-G3KJGGE15-1483081061-000169\n\t\tlet slackTS;\n\t\tlet index = rocketMsg._id.indexOf('slack-');\n\t\tif (index === 0) {\n\t\t\t// This is a msg that originated from Slack\n\t\t\tslackTS = rocketMsg._id.substr(6, rocketMsg._id.length);\n\t\t\tindex = slackTS.indexOf('-');\n\t\t\tslackTS = slackTS.substr(index + 1, slackTS.length);\n\t\t\tslackTS = slackTS.replace('-', '.');\n\t\t} else {\n\t\t\t// This probably originated as a Rocket msg, but has been sent to Slack\n\t\t\tslackTS = rocketMsg.slackTs;\n\t\t}\n\n\t\treturn slackTS;\n\t}\n\n\t/**\n\t * Adds a slack channel to our collection that the rocketbot is a member of on slack\n\t * @param rocketChID\n\t * @param slackChID\n\t */\n\taddSlackChannel(rocketChID, slackChID) {\n\t\tconst ch = this.getSlackChannel(rocketChID);\n\t\tif (null == ch) {\n\t\t\tthis.slackChannelRocketBotMembershipMap.set(rocketChID, { id: slackChID, family: slackChID.charAt(0) === 'C' ? 'channels' : 'groups' });\n\t\t}\n\t}\n\n\tremoveSlackChannel(slackChID) {\n\t\tconst keys = this.slackChannelRocketBotMembershipMap.keys();\n\t\tlet slackChannel;\n\t\tlet key;\n\t\twhile ((key = keys.next().value) != null) {\n\t\t\tslackChannel = this.slackChannelRocketBotMembershipMap.get(key);\n\t\t\tif (slackChannel.id === slackChID) {\n\t\t\t\t// Found it, need to delete it\n\t\t\t\tthis.slackChannelRocketBotMembershipMap.delete(key);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetSlackChannel(rocketChID) {\n\t\treturn this.slackChannelRocketBotMembershipMap.get(rocketChID);\n\t}\n\n\tpopulateMembershipChannelMapByChannels() {\n\t\tconst response = HTTP.get('https://slack.com/api/channels.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.channels) && response.data.channels.length > 0) {\n\t\t\tfor (const slackChannel of response.data.channels) {\n\t\t\t\tconst rocketchat_room = RocketChat.models.Rooms.findOneByName(slackChannel.name, { fields: { _id: 1 } });\n\t\t\t\tif (rocketchat_room) {\n\t\t\t\t\tif (slackChannel.is_member) {\n\t\t\t\t\t\tthis.addSlackChannel(rocketchat_room._id, slackChannel.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpopulateMembershipChannelMapByGroups() {\n\t\tconst response = HTTP.get('https://slack.com/api/groups.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.groups) && response.data.groups.length > 0) {\n\t\t\tfor (const slackGroup of response.data.groups) {\n\t\t\t\tconst rocketchat_room = RocketChat.models.Rooms.findOneByName(slackGroup.name, { fields: { _id: 1 } });\n\t\t\t\tif (rocketchat_room) {\n\t\t\t\t\tif (slackGroup.is_member) {\n\t\t\t\t\t\tthis.addSlackChannel(rocketchat_room._id, slackGroup.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpopulateMembershipChannelMap() {\n\t\tlogger.slack.debug('Populating channel map');\n\t\tthis.populateMembershipChannelMapByChannels();\n\t\tthis.populateMembershipChannelMapByGroups();\n\t}\n\n\t/*\n\t https://api.slack.com/methods/reactions.add\n\t */\n\tpostReactionAdded(reaction, slackChannel, slackTS) {\n\t\tif (reaction && slackChannel && slackTS) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tname: reaction,\n\t\t\t\tchannel: slackChannel,\n\t\t\t\ttimestamp: slackTS,\n\t\t\t};\n\n\t\t\tlogger.slack.debug('Posting Add Reaction to Slack');\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/reactions.add', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.slack.debug('Reaction added to Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/methods/reactions.remove\n\t */\n\tpostReactionRemove(reaction, slackChannel, slackTS) {\n\t\tif (reaction && slackChannel && slackTS) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tname: reaction,\n\t\t\t\tchannel: slackChannel,\n\t\t\t\ttimestamp: slackTS,\n\t\t\t};\n\n\t\t\tlogger.slack.debug('Posting Remove Reaction to Slack');\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/reactions.remove', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.slack.debug('Reaction removed from Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tpostDeleteMessage(rocketMessage) {\n\t\tif (rocketMessage) {\n\t\t\tconst slackChannel = this.getSlackChannel(rocketMessage.rid);\n\n\t\t\tif (slackChannel != null) {\n\t\t\t\tconst data = {\n\t\t\t\t\ttoken: this.apiToken,\n\t\t\t\t\tts: this.getTimeStamp(rocketMessage),\n\t\t\t\t\tchannel: this.getSlackChannel(rocketMessage.rid).id,\n\t\t\t\t\tas_user: true,\n\t\t\t\t};\n\n\t\t\t\tlogger.slack.debug('Post Delete Message to Slack', data);\n\t\t\t\tconst postResult = HTTP.post('https://slack.com/api/chat.delete', { params: data });\n\t\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\t\tlogger.slack.debug('Message deleted on Slack');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpostMessage(slackChannel, rocketMessage) {\n\t\tif (slackChannel && slackChannel.id) {\n\t\t\tlet iconUrl = getAvatarUrlFromUsername(rocketMessage.u && rocketMessage.u.username);\n\t\t\tif (iconUrl) {\n\t\t\t\ticonUrl = Meteor.absoluteUrl().replace(/\\/$/, '') + iconUrl;\n\t\t\t}\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\ttext: rocketMessage.msg,\n\t\t\t\tchannel: slackChannel.id,\n\t\t\t\tusername: rocketMessage.u && rocketMessage.u.username,\n\t\t\t\ticon_url: iconUrl,\n\t\t\t\tlink_names: 1,\n\t\t\t};\n\t\t\tlogger.slack.debug('Post Message To Slack', data);\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/chat.postMessage', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.message && postResult.data.message.bot_id && postResult.data.message.ts) {\n\t\t\t\tRocketChat.models.Messages.setSlackBotIdAndSlackTs(rocketMessage._id, postResult.data.message.bot_id, postResult.data.message.ts);\n\t\t\t\tlogger.slack.debug(`RocketMsgID=${ rocketMessage._id } SlackMsgID=${ postResult.data.message.ts } SlackBotID=${ postResult.data.message.bot_id }`);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/methods/chat.update\n\t */\n\tpostMessageUpdate(slackChannel, rocketMessage) {\n\t\tif (slackChannel && slackChannel.id) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tts: this.getTimeStamp(rocketMessage),\n\t\t\t\tchannel: slackChannel.id,\n\t\t\t\ttext: rocketMessage.msg,\n\t\t\t\tas_user: true,\n\t\t\t};\n\t\t\tlogger.slack.debug('Post UpdateMessage To Slack', data);\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/chat.update', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.slack.debug('Message updated on Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessChannelJoin(slackMessage) {\n\t\tlogger.slack.debug('Channel join', slackMessage.channel.id);\n\t\tconst rocketCh = this.rocket.addChannel(slackMessage.channel);\n\t\tif (null != rocketCh) {\n\t\t\tthis.addSlackChannel(rocketCh._id, slackMessage.channel);\n\t\t}\n\t}\n\n\tprocessFileShare(slackMessage) {\n\t\tif (! RocketChat.settings.get('SlackBridge_FileUpload_Enabled')) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (slackMessage.file && slackMessage.file.url_private_download !== undefined) {\n\t\t\tconst rocketChannel = this.rocket.getChannel(slackMessage);\n\t\t\tconst rocketUser = this.rocket.getUser(slackMessage.user);\n\n\t\t\t// Hack to notify that a file was attempted to be uploaded\n\t\t\tdelete slackMessage.subtype;\n\n\t\t\t// If the text includes the file link, simply use the same text for the rocket message.\n\t\t\t// If the link was not included, then use it instead of the message.\n\n\t\t\tif (slackMessage.text.indexOf(slackMessage.file.permalink) < 0) {\n\t\t\t\tslackMessage.text = slackMessage.file.permalink;\n\t\t\t}\n\n\t\t\tconst ts = new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000);\n\t\t\tconst msgDataDefaults = {\n\t\t\t\t_id: this.rocket.createRocketID(slackMessage.channel, slackMessage.ts),\n\t\t\t\tts,\n\t\t\t\tupdatedBySlack: true,\n\t\t\t};\n\n\t\t\tthis.rocket.createAndSaveMessage(rocketChannel, rocketUser, slackMessage, msgDataDefaults, false);\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/message/message_deleted\n\t */\n\tprocessMessageDeleted(slackMessage) {\n\t\tif (slackMessage.previous_message) {\n\t\t\tconst rocketChannel = this.rocket.getChannel(slackMessage);\n\t\t\tconst rocketUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\n\t\t\tif (rocketChannel && rocketUser) {\n\t\t\t\t// Find the Rocket message to delete\n\t\t\t\tlet rocketMsgObj = RocketChat.models.Messages\n\t\t\t\t\t.findOneBySlackBotIdAndSlackTs(slackMessage.previous_message.bot_id, slackMessage.previous_message.ts);\n\n\t\t\t\tif (!rocketMsgObj) {\n\t\t\t\t\t// Must have been a Slack originated msg\n\t\t\t\t\tconst _id = this.rocket.createRocketID(slackMessage.channel, slackMessage.previous_message.ts);\n\t\t\t\t\trocketMsgObj = RocketChat.models.Messages.findOneById(_id);\n\t\t\t\t}\n\n\t\t\t\tif (rocketMsgObj) {\n\t\t\t\t\tRocketChat.deleteMessage(rocketMsgObj, rocketUser);\n\t\t\t\t\tlogger.slack.debug('Rocket message deleted by Slack');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/message/message_changed\n\t */\n\tprocessMessageChanged(slackMessage) {\n\t\tif (slackMessage.previous_message) {\n\t\t\tconst currentMsg = RocketChat.models.Messages.findOneById(this.rocket.createRocketID(slackMessage.channel, slackMessage.message.ts));\n\n\t\t\t// Only process this change, if its an actual update (not just Slack repeating back our Rocket original change)\n\t\t\tif (currentMsg && (slackMessage.message.text !== currentMsg.msg)) {\n\t\t\t\tconst rocketChannel = this.rocket.getChannel(slackMessage);\n\t\t\t\tconst rocketUser = slackMessage.previous_message.user ? this.rocket.findUser(slackMessage.previous_message.user) || this.rocket.addUser(slackMessage.previous_message.user) : null;\n\n\t\t\t\tconst rocketMsgObj = {\n\t\t\t\t\t// @TODO _id\n\t\t\t\t\t_id: this.rocket.createRocketID(slackMessage.channel, slackMessage.previous_message.ts),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tmsg: this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.message.text),\n\t\t\t\t\tupdatedBySlack: true,\t// We don't want to notify slack about this change since Slack initiated it\n\t\t\t\t};\n\n\t\t\t\tRocketChat.updateMessage(rocketMsgObj, rocketUser);\n\t\t\t\tlogger.slack.debug('Rocket message updated by Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t This method will get refactored and broken down into single responsibilities\n\t */\n\tprocessNewMessage(slackMessage, isImporting) {\n\t\tconst rocketChannel = this.rocket.getChannel(slackMessage);\n\t\tlet rocketUser = null;\n\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\trocketUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\t\t} else {\n\t\t\trocketUser = slackMessage.user ? this.rocket.findUser(slackMessage.user) || this.rocket.addUser(slackMessage.user) : null;\n\t\t}\n\t\tif (rocketChannel && rocketUser) {\n\t\t\tconst msgDataDefaults = {\n\t\t\t\t_id: this.rocket.createRocketID(slackMessage.channel, slackMessage.ts),\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t};\n\t\t\tif (isImporting) {\n\t\t\t\tmsgDataDefaults.imported = 'slackbridge';\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tthis.rocket.createAndSaveMessage(rocketChannel, rocketUser, slackMessage, msgDataDefaults, isImporting);\n\t\t\t} catch (e) {\n\t\t\t\t// http://www.mongodb.org/about/contributors/error-codes/\n\t\t\t\t// 11000 == duplicate key error\n\t\t\t\tif (e.name === 'MongoError' && e.code === 11000) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessBotMessage(rocketChannel, slackMessage) {\n\t\tconst excludeBotNames = RocketChat.settings.get('SlackBridge_Botnames');\n\t\tif (slackMessage.username !== undefined && excludeBotNames && slackMessage.username.match(excludeBotNames)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rocketMsgObj = {\n\t\t\tmsg: this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n\t\t\trid: rocketChannel._id,\n\t\t\tbot: true,\n\t\t\tattachments: slackMessage.attachments,\n\t\t\tusername: slackMessage.username || slackMessage.bot_id,\n\t\t};\n\t\tthis.rocket.addAliasToMsg(slackMessage.username || slackMessage.bot_id, rocketMsgObj);\n\t\tif (slackMessage.icons) {\n\t\t\trocketMsgObj.emoji = slackMessage.icons.emoji;\n\t\t}\n\t\treturn rocketMsgObj;\n\t}\n\n\tprocessMeMessage(rocketUser, slackMessage) {\n\t\treturn this.rocket.addAliasToMsg(rocketUser.username, {\n\t\t\tmsg: `_${ this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text) }_`,\n\t\t});\n\t}\n\n\tprocessChannelJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tRocketChat.models.Messages.createUserJoinWithRoomIdAndUser(rocketChannel._id, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t} else {\n\t\t\tRocketChat.addUserToRoom(rocketChannel._id, rocketUser);\n\t\t}\n\t}\n\n\tprocessGroupJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (slackMessage.inviter) {\n\t\t\tconst inviter = slackMessage.inviter ? this.rocket.findUser(slackMessage.inviter) || this.rocket.addUser(slackMessage.inviter) : null;\n\t\t\tif (isImporting) {\n\t\t\t\tRocketChat.models.Messages.createUserAddedWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n\t\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\t\tu: {\n\t\t\t\t\t\t_id: inviter._id,\n\t\t\t\t\t\tusername: inviter.username,\n\t\t\t\t\t},\n\t\t\t\t\timported: 'slackbridge',\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tRocketChat.addUserToRoom(rocketChannel._id, rocketUser, inviter);\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessLeaveMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tRocketChat.models.Messages.createUserLeaveWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\timported: 'slackbridge',\n\t\t\t});\n\t\t} else {\n\t\t\tRocketChat.removeUserFromRoom(rocketChannel._id, rocketUser);\n\t\t}\n\t}\n\n\tprocessTopicMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', rocketChannel._id, slackMessage.topic, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t} else {\n\t\t\tRocketChat.saveRoomTopic(rocketChannel._id, slackMessage.topic, rocketUser, false);\n\t\t}\n\t}\n\n\tprocessPurposeMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', rocketChannel._id, slackMessage.purpose, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t} else {\n\t\t\tRocketChat.saveRoomTopic(rocketChannel._id, slackMessage.purpose, rocketUser, false);\n\t\t}\n\t}\n\n\tprocessNameMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tRocketChat.models.Messages.createRoomRenamedWithRoomIdRoomNameAndUser(rocketChannel._id, slackMessage.name, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t} else {\n\t\t\tRocketChat.saveRoomName(rocketChannel._id, slackMessage.name, rocketUser, false);\n\t\t}\n\t}\n\n\tprocessShareMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (slackMessage.file && slackMessage.file.url_private_download !== undefined) {\n\t\t\tconst details = {\n\t\t\t\tmessage_id: `slack-${ slackMessage.ts.replace(/\\./g, '-') }`,\n\t\t\t\tname: slackMessage.file.name,\n\t\t\t\tsize: slackMessage.file.size,\n\t\t\t\ttype: slackMessage.file.mimetype,\n\t\t\t\trid: rocketChannel._id,\n\t\t\t};\n\t\t\treturn this.uploadFileFromSlack(details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n\t\t}\n\t}\n\n\tprocessPinnedItemMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (slackMessage.attachments && slackMessage.attachments[0] && slackMessage.attachments[0].text) {\n\t\t\tconst rocketMsgObj = {\n\t\t\t\trid: rocketChannel._id,\n\t\t\t\tt: 'message_pinned',\n\t\t\t\tmsg: '',\n\t\t\t\tu: {\n\t\t\t\t\t_id: rocketUser._id,\n\t\t\t\t\tusername: rocketUser.username,\n\t\t\t\t},\n\t\t\t\tattachments: [{\n\t\t\t\t\ttext : this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.attachments[0].text),\n\t\t\t\t\tauthor_name : slackMessage.attachments[0].author_subname,\n\t\t\t\t\tauthor_icon : getAvatarUrlFromUsername(slackMessage.attachments[0].author_subname),\n\t\t\t\t\tts : new Date(parseInt(slackMessage.attachments[0].ts.split('.')[0]) * 1000),\n\t\t\t\t}],\n\t\t\t};\n\n\t\t\tif (!isImporting) {\n\t\t\t\tRocketChat.models.Messages.setPinnedByIdAndUserId(`slack-${ slackMessage.attachments[0].channel_id }-${ slackMessage.attachments[0].ts.replace(/\\./g, '-') }`, rocketMsgObj.u, true, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000));\n\t\t\t}\n\n\t\t\treturn rocketMsgObj;\n\t\t} else {\n\t\t\tlogger.slack.error('Pinned item with no attachment');\n\t\t}\n\t}\n\n\tprocessSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tswitch (slackMessage.subtype) {\n\t\t\tcase 'bot_message':\n\t\t\t\treturn this.processBotMessage(rocketChannel, slackMessage);\n\t\t\tcase 'me_message':\n\t\t\t\treturn this.processMeMessage(rocketUser, slackMessage);\n\t\t\tcase 'channel_join':\n\t\t\t\treturn this.processChannelJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'group_join':\n\t\t\t\treturn this.processGroupJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_leave':\n\t\t\tcase 'group_leave':\n\t\t\t\treturn this.processLeaveMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_topic':\n\t\t\tcase 'group_topic':\n\t\t\t\treturn this.processTopicMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_purpose':\n\t\t\tcase 'group_purpose':\n\t\t\t\treturn this.processPurposeMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_name':\n\t\t\tcase 'group_name':\n\t\t\t\treturn this.processNameMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_archive':\n\t\t\tcase 'group_archive':\n\t\t\t\tif (!isImporting) {\n\t\t\t\t\tRocketChat.archiveRoom(rocketChannel);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_unarchive':\n\t\t\tcase 'group_unarchive':\n\t\t\t\tif (!isImporting) {\n\t\t\t\t\tRocketChat.unarchiveRoom(rocketChannel);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'file_share':\n\t\t\t\treturn this.processShareMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'file_comment':\n\t\t\t\tlogger.slack.error('File comment not implemented');\n\t\t\t\treturn;\n\t\t\tcase 'file_mention':\n\t\t\t\tlogger.slack.error('File mentioned not implemented');\n\t\t\t\treturn;\n\t\t\tcase 'pinned_item':\n\t\t\t\treturn this.processPinnedItemMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'unpinned_item':\n\t\t\t\tlogger.slack.error('Unpinned item not implemented');\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n\tUploads the file to the storage.\n\t@param [Object] details an object with details about the upload. name, size, type, and rid\n\t@param [String] fileUrl url of the file to download/import\n\t@param [Object] user the Rocket.Chat user\n\t@param [Object] room the Rocket.Chat room\n\t@param [Date] timeStamp the timestamp the file was uploaded\n\t**/\n\t// details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n\tuploadFileFromSlack(details, slackFileURL, rocketUser, rocketChannel, timeStamp, isImporting) {\n\t\tconst requestModule = /https/i.test(slackFileURL) ? https : http;\n\t\tconst parsedUrl = url.parse(slackFileURL, true);\n\t\tparsedUrl.headers = { Authorization: `Bearer ${ this.apiToken }` };\n\t\trequestModule.get(parsedUrl, Meteor.bindEnvironment((stream) => {\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\n\t\t\tfileStore.insert(details, stream, (err, file) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tthrow new Error(err);\n\t\t\t\t} else {\n\t\t\t\t\tconst url = file.url.replace(Meteor.absoluteUrl(), '/');\n\t\t\t\t\tconst attachment = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttitle_link: url,\n\t\t\t\t\t};\n\n\t\t\t\t\tif (/^image\\/.+/.test(file.type)) {\n\t\t\t\t\t\tattachment.image_url = url;\n\t\t\t\t\t\tattachment.image_type = file.type;\n\t\t\t\t\t\tattachment.image_size = file.size;\n\t\t\t\t\t\tattachment.image_dimensions = file.identify && file.identify.size;\n\t\t\t\t\t}\n\t\t\t\t\tif (/^audio\\/.+/.test(file.type)) {\n\t\t\t\t\t\tattachment.audio_url = url;\n\t\t\t\t\t\tattachment.audio_type = file.type;\n\t\t\t\t\t\tattachment.audio_size = file.size;\n\t\t\t\t\t}\n\t\t\t\t\tif (/^video\\/.+/.test(file.type)) {\n\t\t\t\t\t\tattachment.video_url = url;\n\t\t\t\t\t\tattachment.video_type = file.type;\n\t\t\t\t\t\tattachment.video_size = file.size;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst msg = {\n\t\t\t\t\t\trid: details.rid,\n\t\t\t\t\t\tts: timeStamp,\n\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\tfile: {\n\t\t\t\t\t\t\t_id: file._id,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgroupable: false,\n\t\t\t\t\t\tattachments: [attachment],\n\t\t\t\t\t};\n\n\t\t\t\t\tif (isImporting) {\n\t\t\t\t\t\tmsg.imported = 'slackbridge';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (details.message_id && (typeof details.message_id === 'string')) {\n\t\t\t\t\t\tmsg._id = details.message_id;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn RocketChat.sendMessage(rocketUser, msg, rocketChannel, true);\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t}\n\n\timportFromHistory(family, options) {\n\t\tlogger.slack.debug('Importing messages history');\n\t\tconst response = HTTP.get(`https://slack.com/api/${ family }.history`, { params: _.extend({ token: this.apiToken }, options) });\n\t\tif (response && response.data && _.isArray(response.data.messages) && response.data.messages.length > 0) {\n\t\t\tlet latest = 0;\n\t\t\tfor (const message of response.data.messages.reverse()) {\n\t\t\t\tlogger.slack.debug('MESSAGE: ', message);\n\t\t\t\tif (!latest || message.ts > latest) {\n\t\t\t\t\tlatest = message.ts;\n\t\t\t\t}\n\t\t\t\tmessage.channel = options.channel;\n\t\t\t\tthis.onMessage(message, true);\n\t\t\t}\n\t\t\treturn { has_more: response.data.has_more, ts: latest };\n\t\t}\n\t}\n\n\tcopyChannelInfo(rid, channelMap) {\n\t\tlogger.slack.debug('Copying users from Slack channel to Rocket.Chat', channelMap.id, rid);\n\t\tconst response = HTTP.get(`https://slack.com/api/${ channelMap.family }.info`, { params: { token: this.apiToken, channel: channelMap.id } });\n\t\tif (response && response.data) {\n\t\t\tconst data = channelMap.family === 'channels' ? response.data.channel : response.data.group;\n\t\t\tif (data && _.isArray(data.members) && data.members.length > 0) {\n\t\t\t\tfor (const member of data.members) {\n\t\t\t\t\tconst user = this.rocket.findUser(member) || this.rocket.addUser(member);\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tlogger.slack.debug('Adding user to room', user.username, rid);\n\t\t\t\t\t\tRocketChat.addUserToRoom(rid, user, null, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet topic = '';\n\t\t\tlet topic_last_set = 0;\n\t\t\tlet topic_creator = null;\n\t\t\tif (data && data.topic && data.topic.value) {\n\t\t\t\ttopic = data.topic.value;\n\t\t\t\ttopic_last_set = data.topic.last_set;\n\t\t\t\ttopic_creator = data.topic.creator;\n\t\t\t}\n\n\t\t\tif (data && data.purpose && data.purpose.value) {\n\t\t\t\tif (topic_last_set) {\n\t\t\t\t\tif (topic_last_set < data.purpose.last_set) {\n\t\t\t\t\t\ttopic = data.purpose.topic;\n\t\t\t\t\t\ttopic_creator = data.purpose.creator;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttopic = data.purpose.topic;\n\t\t\t\t\ttopic_creator = data.purpose.creator;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (topic) {\n\t\t\t\tconst creator = this.rocket.findUser(topic_creator) || this.rocket.addUser(topic_creator);\n\t\t\t\tlogger.slack.debug('Setting room topic', rid, topic, creator.username);\n\t\t\t\tRocketChat.saveRoomTopic(rid, topic, creator, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tcopyPins(rid, channelMap) {\n\t\tconst response = HTTP.get('https://slack.com/api/pins.list', { params: { token: this.apiToken, channel: channelMap.id } });\n\t\tif (response && response.data && _.isArray(response.data.items) && response.data.items.length > 0) {\n\t\t\tfor (const pin of response.data.items) {\n\t\t\t\tif (pin.message) {\n\t\t\t\t\tconst user = this.rocket.findUser(pin.message.user);\n\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\trid,\n\t\t\t\t\t\tt: 'message_pinned',\n\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\tusername: user.username,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tattachments: [{\n\t\t\t\t\t\t\ttext : this.rocket.convertSlackMsgTxtToRocketTxtFormat(pin.message.text),\n\t\t\t\t\t\t\tauthor_name : user.username,\n\t\t\t\t\t\t\tauthor_icon : getAvatarUrlFromUsername(user.username),\n\t\t\t\t\t\t\tts : new Date(parseInt(pin.message.ts.split('.')[0]) * 1000),\n\t\t\t\t\t\t}],\n\t\t\t\t\t};\n\n\t\t\t\t\tRocketChat.models.Messages.setPinnedByIdAndUserId(`slack-${ pin.channel }-${ pin.message.ts.replace(/\\./g, '-') }`, msgObj.u, true, new Date(parseInt(pin.message.ts.split('.')[0]) * 1000));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\timportMessages(rid, callback) {\n\t\tlogger.slack.info('importMessages: ', rid);\n\t\tconst rocketchat_room = RocketChat.models.Rooms.findOneById(rid);\n\t\tif (rocketchat_room) {\n\t\t\tif (this.getSlackChannel(rid)) {\n\t\t\t\tthis.copyChannelInfo(rid, this.getSlackChannel(rid));\n\n\t\t\t\tlogger.slack.debug('Importing messages from Slack to Rocket.Chat', this.getSlackChannel(rid), rid);\n\t\t\t\tlet results = this.importFromHistory(this.getSlackChannel(rid).family, { channel: this.getSlackChannel(rid).id, oldest: 1 });\n\t\t\t\twhile (results && results.has_more) {\n\t\t\t\t\tresults = this.importFromHistory(this.getSlackChannel(rid).family, { channel: this.getSlackChannel(rid).id, oldest: results.ts });\n\t\t\t\t}\n\n\t\t\t\tlogger.slack.debug('Pinning Slack channel messages to Rocket.Chat', this.getSlackChannel(rid), rid);\n\t\t\t\tthis.copyPins(rid, this.getSlackChannel(rid));\n\n\t\t\t\treturn callback();\n\t\t\t} else {\n\t\t\t\tconst slack_room = this.postFindChannel(rocketchat_room.name);\n\t\t\t\tif (slack_room) {\n\t\t\t\t\tthis.addSlackChannel(rid, slack_room.id);\n\t\t\t\t\treturn this.importMessages(rid, callback);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.slack.error('Could not find Slack room with specified name', rocketchat_room.name);\n\t\t\t\t\treturn callback(new Meteor.Error('error-slack-room-not-found', 'Could not find Slack room with specified name'));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.slack.error('Could not find Rocket.Chat room with specified id', rid);\n\t\t\treturn callback(new Meteor.Error('error-invalid-room', 'Invalid room'));\n\t\t}\n\t}\n\n}\n\n"]}