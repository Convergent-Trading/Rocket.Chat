{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:importer-slack/info.js","meteor://ðŸ’»app/packages/rocketchat:importer-slack/server/importer.js","meteor://ðŸ’»app/packages/rocketchat:importer-slack/server/adder.js"],"names":["module","export","SlackImporterInfo","ImporterInfo","watch","require","v","constructor","SlackImporter","Base","ProgressStep","Selection","SelectionChannel","SelectionUser","_","default","info","userTags","bots","prepare","dataURI","sentContentType","fileName","image","RocketChatFile","dataURIParse","zip","AdmZip","Buffer","zipEntries","getEntries","tempChannels","tempUsers","tempMessages","forEach","entry","entryName","indexOf","logger","debug","updateProgress","PREPARING_CHANNELS","JSON","parse","getData","toString","filter","channel","creator","PREPARING_USERS","user","is_bot","profile","bot_id","isDirectory","item","split","channelName","msgGroupData","error","warn","usersId","collection","insert","import","importRecord","_id","importer","name","type","users","findOne","updateRecord","length","addCountToTotal","channelsId","channels","PREPARING_MESSAGES","messagesCount","Object","keys","messagesObj","messages","date","msgs","messagesstatus","getBSONSize","getMaxBSONSize","tmp","getBSONSafeArraysFromAnArray","i","splitMsg","messagesId","some","e","console","log","ERROR","getProgress","selectionUsers","map","id","email","deleted","selectionChannels","is_archived","selectionMessages","count","USER_SELECTION","startImport","importSelection","start","Date","now","key","k","u","user_id","do_import","update","$set","c","channel_id","startedByUserId","Meteor","userId","defer","IMPORTING_USERS","runAsUser","existantUser","RocketChat","models","Users","findOneByEmailAddress","findOneByUsername","rocketId","$addToSet","importIds","push","slack","slackLong","rocket","username","Accounts","createUser","password","toUpperCase","joinDefaultChannelsSilenced","call","url","image_original","image_512","undefined","tz_offset","real_name","setName","addCountCompleted","IMPORTING_CHANNELS","existantRoom","Rooms","findOneByName","is_general","members","reduce","ret","member","getRocketUser","returned","rid","roomUpdate","ts","created","isEmpty","topic","value","purpose","description","missedTypes","ignoreTypes","bot_add","file_comment","file_mention","IMPORTING_MESSAGES","slackChannel","getSlackChannelFromName","room","findOneById","fields","usernames","t","message","msgDataDefaults","replace","parseInt","reactions","reaction","rcUser","subtype","Messages","createUserJoinWithRoomIdAndUser","createUserLeaveWithRoomIdAndUser","msgObj","msg","convertSlackMessageToRocketChat","text","sendMessage","botUser","botUsername","bot","attachments","edited","editedAt","editedBy","icons","emoji","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","createRoomRenamedWithRoomIdRoomNameAndUser","author_name","author_subname","author_icon","getAvatarUrlFromUsername","createWithTypeRoomIdMessageAndUser","file","url_private_download","details","message_id","size","mimetype","uploadFile","FINISHING","DONE","find","slackId","userReplace","Array","from","getSelection","Importers","add"],"mappings":"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","file":"/packages/rocketchat_importer-slack.js","sourcesContent":["import { ImporterInfo } from 'meteor/rocketchat:importer';\n\nexport class SlackImporterInfo extends ImporterInfo {\n\tconstructor() {\n\t\tsuper('slack', 'Slack', 'application/zip');\n\t}\n}\n","import {\n\tBase,\n\tProgressStep,\n\tSelection,\n\tSelectionChannel,\n\tSelectionUser,\n} from 'meteor/rocketchat:importer';\n\nimport _ from 'underscore';\n\nexport class SlackImporter extends Base {\n\tconstructor(info) {\n\t\tsuper(info);\n\t\tthis.userTags = [];\n\t\tthis.bots = {};\n\t}\n\n\tprepare(dataURI, sentContentType, fileName) {\n\t\tsuper.prepare(dataURI, sentContentType, fileName);\n\n\t\tconst { image } = RocketChatFile.dataURIParse(dataURI);\n\t\tconst zip = new this.AdmZip(new Buffer(image, 'base64'));\n\t\tconst zipEntries = zip.getEntries();\n\n\t\tlet tempChannels = [];\n\t\tlet tempUsers = [];\n\t\tconst tempMessages = {};\n\n\t\tzipEntries.forEach((entry) => {\n\t\t\tif (entry.entryName.indexOf('__MACOSX') > -1) {\n\t\t\t\treturn this.logger.debug(`Ignoring the file: ${ entry.entryName }`);\n\t\t\t}\n\n\t\t\tif (entry.entryName === 'channels.json') {\n\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\t\t\ttempChannels = JSON.parse(entry.getData().toString()).filter((channel) => channel.creator != null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (entry.entryName === 'users.json') {\n\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_USERS);\n\t\t\t\ttempUsers = JSON.parse(entry.getData().toString());\n\n\t\t\t\ttempUsers.forEach((user) => {\n\t\t\t\t\tif (user.is_bot) {\n\t\t\t\t\t\tthis.bots[user.profile.bot_id] = user;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!entry.isDirectory && entry.entryName.indexOf('/') > -1) {\n\t\t\t\tconst item = entry.entryName.split('/');\n\t\t\t\tconst channelName = item[0];\n\t\t\t\tconst msgGroupData = item[1].split('.')[0];\n\t\t\t\ttempMessages[channelName] = tempMessages[channelName] || {};\n\n\t\t\t\ttry {\n\t\t\t\t\ttempMessages[channelName][msgGroupData] = JSON.parse(entry.getData().toString());\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logger.warn(`${ entry.entryName } is not a valid JSON file! Unable to import it.`);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// Insert the users record, eventually this might have to be split into several ones as well\n\t\t// if someone tries to import a several thousands users instance\n\t\tconst usersId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'users', users: tempUsers });\n\t\tthis.users = this.collection.findOne(usersId);\n\t\tthis.updateRecord({ 'count.users': tempUsers.length });\n\t\tthis.addCountToTotal(tempUsers.length);\n\n\t\t// Insert the channels records.\n\t\tconst channelsId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'channels', channels: tempChannels });\n\t\tthis.channels = this.collection.findOne(channelsId);\n\t\tthis.updateRecord({ 'count.channels': tempChannels.length });\n\t\tthis.addCountToTotal(tempChannels.length);\n\n\t\t// Insert the messages records\n\t\tsuper.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\n\t\tlet messagesCount = 0;\n\t\tObject.keys(tempMessages).forEach((channel) => {\n\t\t\tconst messagesObj = tempMessages[channel];\n\t\t\tthis.messages[channel] = this.messages[channel] || {};\n\n\t\t\tObject.keys(messagesObj).forEach((date) => {\n\t\t\t\tconst msgs = messagesObj[date];\n\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\tthis.updateRecord({ messagesstatus: `${ channel }/${ date }` });\n\t\t\t\tif (Base.getBSONSize(msgs) > Base.getMaxBSONSize()) {\n\t\t\t\t\tconst tmp = Base.getBSONSafeArraysFromAnArray(msgs);\n\t\t\t\t\tObject.keys(tmp).forEach((i) => {\n\t\t\t\t\t\tconst splitMsg = tmp[i];\n\t\t\t\t\t\tconst messagesId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'messages', name: `${ channel }/${ date }.${ i }`, messages: splitMsg });\n\t\t\t\t\t\tthis.messages[channel][`${ date }.${ i }`] = this.collection.findOne(messagesId);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst messagesId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'messages', name: `${ channel }/${ date }`, messages: msgs });\n\t\t\t\t\tthis.messages[channel][date] = this.collection.findOne(messagesId);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.updateRecord({ 'count.messages': messagesCount, messagesstatus: null });\n\t\tthis.addCountToTotal(messagesCount);\n\n\t\tif ([tempUsers.length, tempChannels.length, messagesCount].some((e) => e === 0)) {\n\t\t\tthis.logger.warn(`The loaded users count ${ tempUsers.length }, the loaded channels ${ tempChannels.length }, and the loaded messages ${ messagesCount }`);\n\t\t\tconsole.log(`The loaded users count ${ tempUsers.length }, the loaded channels ${ tempChannels.length }, and the loaded messages ${ messagesCount }`);\n\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\treturn this.getProgress();\n\t\t}\n\n\t\tconst selectionUsers = tempUsers.map((user) => new SelectionUser(user.id, user.name, user.profile.email, user.deleted, user.is_bot, !user.is_bot));\n\t\tconst selectionChannels = tempChannels.map((channel) => new SelectionChannel(channel.id, channel.name, channel.is_archived, true, false));\n\t\tconst selectionMessages = this.importRecord.count.messages;\n\t\tsuper.updateProgress(ProgressStep.USER_SELECTION);\n\n\t\treturn new Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n\t}\n\n\tstartImport(importSelection) {\n\t\tsuper.startImport(importSelection);\n\t\tconst start = Date.now();\n\n\t\tObject.keys(importSelection.users).forEach((key) => {\n\t\t\tconst user = importSelection.users[key];\n\t\t\tObject.keys(this.users.users).forEach((k) => {\n\t\t\t\tconst u = this.users.users[k];\n\t\t\t\tif (u.id === user.user_id) {\n\t\t\t\t\tu.do_import = user.do_import;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tthis.collection.update({ _id: this.users._id }, { $set: { users: this.users.users } });\n\n\t\tObject.keys(importSelection.channels).forEach((key) => {\n\t\t\tconst channel = importSelection.channels[key];\n\t\t\tObject.keys(this.channels.channels).forEach((k) => {\n\t\t\t\tconst c = this.channels.channels[k];\n\t\t\t\tif (c.id === channel.channel_id) {\n\t\t\t\t\tc.do_import = channel.do_import;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tthis.collection.update({ _id: this.channels._id }, { $set: { channels: this.channels.channels } });\n\n\t\tconst startedByUserId = Meteor.userId();\n\t\tMeteor.defer(() => {\n\t\t\ttry {\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_USERS);\n\t\t\t\tthis.users.users.forEach((user) => {\n\t\t\t\t\tif (!user.do_import) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst existantUser = RocketChat.models.Users.findOneByEmailAddress(user.profile.email) || RocketChat.models.Users.findOneByUsername(user.name);\n\t\t\t\t\t\tif (existantUser) {\n\t\t\t\t\t\t\tuser.rocketId = existantUser._id;\n\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: user.rocketId }, { $addToSet: { importIds: user.id } });\n\t\t\t\t\t\t\tthis.userTags.push({\n\t\t\t\t\t\t\t\tslack: `<@${ user.id }>`,\n\t\t\t\t\t\t\t\tslackLong: `<@${ user.id }|${ user.name }>`,\n\t\t\t\t\t\t\t\trocket: `@${ existantUser.username }`,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst userId = user.profile.email ? Accounts.createUser({ email: user.profile.email, password: Date.now() + user.name + user.profile.email.toUpperCase() }) : Accounts.createUser({ username: user.name, password: Date.now() + user.name, joinDefaultChannelsSilenced: true });\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tMeteor.call('setUsername', user.name, { joinDefaultChannelsSilenced: true });\n\n\t\t\t\t\t\t\t\tconst url = user.profile.image_original || user.profile.image_512;\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tMeteor.call('setAvatarFromService', url, undefined, 'url');\n\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\tthis.logger.warn(`Failed to set ${ user.name }'s avatar from url ${ url }`);\n\t\t\t\t\t\t\t\t\tconsole.log(`Failed to set ${ user.name }'s avatar from url ${ url }`);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Slack's is -18000 which translates to Rocket.Chat's after dividing by 3600\n\t\t\t\t\t\t\t\tif (user.tz_offset) {\n\t\t\t\t\t\t\t\t\tMeteor.call('userSetUtcOffset', user.tz_offset / 3600);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: userId }, { $addToSet: { importIds: user.id } });\n\n\t\t\t\t\t\t\tif (user.profile.real_name) {\n\t\t\t\t\t\t\t\tRocketChat.models.Users.setName(userId, user.profile.real_name);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Deleted users are 'inactive' users in Rocket.Chat\n\t\t\t\t\t\t\tif (user.deleted) {\n\t\t\t\t\t\t\t\tMeteor.call('setUserActiveStatus', userId, false);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tuser.rocketId = userId;\n\t\t\t\t\t\t\tthis.userTags.push({\n\t\t\t\t\t\t\t\tslack: `<@${ user.id }>`,\n\t\t\t\t\t\t\t\tslackLong: `<@${ user.id }|${ user.name }>`,\n\t\t\t\t\t\t\t\trocket: `@${ user.name }`,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tthis.collection.update({ _id: this.users._id }, { $set: { users: this.users.users } });\n\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_CHANNELS);\n\t\t\t\tthis.channels.channels.forEach((channel) => {\n\t\t\t\t\tif (!channel.do_import) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser (startedByUserId, () => {\n\t\t\t\t\t\tconst existantRoom = RocketChat.models.Rooms.findOneByName(channel.name);\n\t\t\t\t\t\tif (existantRoom || channel.is_general) {\n\t\t\t\t\t\t\tif (channel.is_general && existantRoom && channel.name !== existantRoom.name) {\n\t\t\t\t\t\t\t\tMeteor.call('saveRoomSettings', 'GENERAL', 'roomName', channel.name);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tchannel.rocketId = channel.is_general ? 'GENERAL' : existantRoom._id;\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: channel.rocketId }, { $addToSet: { importIds: channel.id } });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst users = channel.members\n\t\t\t\t\t\t\t\t.reduce((ret, member) => {\n\t\t\t\t\t\t\t\t\tif (member !== channel.creator) {\n\t\t\t\t\t\t\t\t\t\tconst user = this.getRocketUser(member);\n\t\t\t\t\t\t\t\t\t\tif (user && user.username) {\n\t\t\t\t\t\t\t\t\t\t\tret.push(user.username);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t\t\t}, []);\n\t\t\t\t\t\t\tlet userId = startedByUserId;\n\t\t\t\t\t\t\tthis.users.users.forEach((user) => {\n\t\t\t\t\t\t\t\tif (user.id === channel.creator && user.do_import) {\n\t\t\t\t\t\t\t\t\tuserId = user.rocketId;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tconst returned = Meteor.call('createChannel', channel.name, users);\n\t\t\t\t\t\t\t\tchannel.rocketId = returned.rid;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// @TODO implement model specific function\n\t\t\t\t\t\t\tconst roomUpdate = {\n\t\t\t\t\t\t\t\tts: new Date(channel.created * 1000),\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (!_.isEmpty(channel.topic && channel.topic.value)) {\n\t\t\t\t\t\t\t\troomUpdate.topic = channel.topic.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!_.isEmpty(channel.purpose && channel.purpose.value)) {\n\t\t\t\t\t\t\t\troomUpdate.description = channel.purpose.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: channel.rocketId }, { $set: roomUpdate, $addToSet: { importIds: channel.id } });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tthis.collection.update({ _id: this.channels._id }, { $set: { channels: this.channels.channels } });\n\n\t\t\t\tconst missedTypes = {};\n\t\t\t\tconst ignoreTypes = { bot_add: true, file_comment: true, file_mention: true };\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_MESSAGES);\n\t\t\t\tObject.keys(this.messages).forEach((channel) => {\n\t\t\t\t\tconst messagesObj = this.messages[channel];\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst slackChannel = this.getSlackChannelFromName(channel);\n\t\t\t\t\t\tif (!slackChannel || !slackChannel.do_import) { return; }\n\t\t\t\t\t\tconst room = RocketChat.models.Rooms.findOneById(slackChannel.rocketId, { fields: { usernames: 1, t: 1, name: 1 } });\n\t\t\t\t\t\tObject.keys(messagesObj).forEach((date) => {\n\t\t\t\t\t\t\tconst msgs = messagesObj[date];\n\t\t\t\t\t\t\tmsgs.messages.forEach((message) => {\n\t\t\t\t\t\t\t\tthis.updateRecord({ messagesstatus: `${ channel }/${ date }.${ msgs.messages.length }` });\n\t\t\t\t\t\t\t\tconst msgDataDefaults = {\n\t\t\t\t\t\t\t\t\t_id: `slack-${ slackChannel.id }-${ message.ts.replace(/\\./g, '-') }`,\n\t\t\t\t\t\t\t\t\tts: new Date(parseInt(message.ts.split('.')[0]) * 1000),\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Process the reactions\n\t\t\t\t\t\t\t\tif (message.reactions && message.reactions.length > 0) {\n\t\t\t\t\t\t\t\t\tmsgDataDefaults.reactions = {};\n\n\t\t\t\t\t\t\t\t\tmessage.reactions.forEach((reaction) => {\n\t\t\t\t\t\t\t\t\t\treaction.name = `:${ reaction.name }:`;\n\t\t\t\t\t\t\t\t\t\tmsgDataDefaults.reactions[reaction.name] = { usernames: [] };\n\n\t\t\t\t\t\t\t\t\t\treaction.users.forEach((u) => {\n\t\t\t\t\t\t\t\t\t\t\tconst rcUser = this.getRocketUser(u);\n\t\t\t\t\t\t\t\t\t\t\tif (!rcUser) { return; }\n\n\t\t\t\t\t\t\t\t\t\t\tmsgDataDefaults.reactions[reaction.name].usernames.push(rcUser.username);\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\tif (msgDataDefaults.reactions[reaction.name].usernames.length === 0) {\n\t\t\t\t\t\t\t\t\t\t\tdelete msgDataDefaults.reactions[reaction.name];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (message.type === 'message') {\n\t\t\t\t\t\t\t\t\tif (message.subtype) {\n\t\t\t\t\t\t\t\t\t\tif (message.subtype === 'channel_join') {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getRocketUser(message.user)) {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createUserJoinWithRoomIdAndUser(room._id, this.getRocketUser(message.user), msgDataDefaults);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'channel_leave') {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getRocketUser(message.user)) {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createUserLeaveWithRoomIdAndUser(room._id, this.getRocketUser(message.user), msgDataDefaults);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'me_message') {\n\t\t\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t...msgDataDefaults,\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: `_${ this.convertSlackMessageToRocketChat(message.text) }_`,\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(this.getRocketUser(message.user), msgObj, room, true);\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'bot_message' || message.subtype === 'slackbot_response') {\n\t\t\t\t\t\t\t\t\t\t\tconst botUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\t\t\t\t\t\t\t\t\t\t\tconst botUsername = this.bots[message.bot_id] ? this.bots[message.bot_id].name : message.username;\n\t\t\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t...msgDataDefaults,\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: this.convertSlackMessageToRocketChat(message.text),\n\t\t\t\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\t\t\t\tbot: true,\n\t\t\t\t\t\t\t\t\t\t\t\tattachments: message.attachments,\n\t\t\t\t\t\t\t\t\t\t\t\tusername: botUsername || undefined,\n\t\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\t\tif (message.edited) {\n\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\tconst editedBy = this.getRocketUser(message.edited.user);\n\t\t\t\t\t\t\t\t\t\t\t\tif (editedBy) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedBy = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_id: editedBy._id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tusername: editedBy.username,\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tif (message.icons) {\n\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.emoji = message.icons.emoji;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(botUser, msgObj, room, true);\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'channel_purpose') {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getRocketUser(message.user)) {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_description', room._id, message.purpose, this.getRocketUser(message.user), msgDataDefaults);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'channel_topic') {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getRocketUser(message.user)) {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', room._id, message.topic, this.getRocketUser(message.user), msgDataDefaults);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'channel_name') {\n\t\t\t\t\t\t\t\t\t\t\tif (this.getRocketUser(message.user)) {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomRenamedWithRoomIdRoomNameAndUser(room._id, message.name, this.getRocketUser(message.user), msgDataDefaults);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'pinned_item') {\n\t\t\t\t\t\t\t\t\t\t\tif (message.attachments) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t...msgDataDefaults,\n\t\t\t\t\t\t\t\t\t\t\t\t\tattachments: [{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttext: this.convertSlackMessageToRocketChat(message.attachments[0].text),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthor_name : message.attachments[0].author_subname,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthor_icon : getAvatarUrlFromUsername(message.attachments[0].author_subname),\n\t\t\t\t\t\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createWithTypeRoomIdMessageAndUser('message_pinned', room._id, '', this.getRocketUser(message.user), msgObj);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t// TODO: make this better\n\t\t\t\t\t\t\t\t\t\t\t\tthis.logger.debug('Pinned item with no attachment, needs work.');\n\t\t\t\t\t\t\t\t\t\t\t\t// RocketChat.models.Messages.createWithTypeRoomIdMessageAndUser 'message_pinned', room._id, '', @getRocketUser(message.user), msgDataDefaults\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (message.subtype === 'file_share') {\n\t\t\t\t\t\t\t\t\t\t\tif (message.file && message.file.url_private_download !== undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst details = {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage_id: `slack-${ message.ts.replace(/\\./g, '-') }`,\n\t\t\t\t\t\t\t\t\t\t\t\t\tname: message.file.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\tsize: message.file.size,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: message.file.mimetype,\n\t\t\t\t\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\tthis.uploadFile(details, message.file.url_private_download, this.getRocketUser(message.user), room, new Date(parseInt(message.ts.split('.')[0]) * 1000));\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else if (!missedTypes[message.subtype] && !ignoreTypes[message.subtype]) {\n\t\t\t\t\t\t\t\t\t\t\tmissedTypes[message.subtype] = message;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tconst user = this.getRocketUser(message.user);\n\t\t\t\t\t\t\t\t\t\tif (user) {\n\t\t\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t\t\t...msgDataDefaults,\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: this.convertSlackMessageToRocketChat(message.text),\n\t\t\t\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\t\t\t\t\t\t\tusername: user.username,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\t\tif (message.edited) {\n\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000);\n\t\t\t\t\t\t\t\t\t\t\t\tconst editedBy = this.getRocketUser(message.edited.user);\n\t\t\t\t\t\t\t\t\t\t\t\tif (editedBy) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmsgObj.editedBy = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_id: editedBy._id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tusername: editedBy.username,\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(this.getRocketUser(message.user), msgObj, room, true);\n\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis.logger.warn(`Failed to import the message: ${ msgDataDefaults._id }`);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.addCountCompleted(1);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tif (!_.isEmpty(missedTypes)) {\n\t\t\t\t\tconsole.log('Missed import types:', missedTypes);\n\t\t\t\t}\n\n\t\t\t\tsuper.updateProgress(ProgressStep.FINISHING);\n\n\t\t\t\tthis.channels.channels.forEach((channel) => {\n\t\t\t\t\tif (channel.do_import && channel.is_archived) {\n\t\t\t\t\t\tMeteor.runAsUser(startedByUserId, function() {\n\t\t\t\t\t\t\tMeteor.call('archiveRoom', channel.rocketId);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tsuper.updateProgress(ProgressStep.DONE);\n\n\t\t\t\tthis.logger.log(`Import took ${ Date.now() - start } milliseconds.`);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\t}\n\t\t});\n\n\t\treturn this.getProgress();\n\t}\n\n\tgetSlackChannelFromName(channelName) {\n\t\treturn this.channels.channels.find((channel) => channel.name === channelName);\n\t}\n\n\tgetRocketUser(slackId) {\n\t\tconst user = this.users.users.find((user) => user.id === slackId);\n\n\t\tif (user) {\n\t\t\treturn RocketChat.models.Users.findOneById(user.rocketId, { fields: { username: 1, name: 1 } });\n\t\t}\n\t}\n\n\tconvertSlackMessageToRocketChat(message) {\n\t\tif (message) {\n\t\t\tmessage = message.replace(/<!everyone>/g, '@all');\n\t\t\tmessage = message.replace(/<!channel>/g, '@all');\n\t\t\tmessage = message.replace(/<!here>/g, '@here');\n\t\t\tmessage = message.replace(/&gt;/g, '>');\n\t\t\tmessage = message.replace(/&lt;/g, '<');\n\t\t\tmessage = message.replace(/&amp;/g, '&');\n\t\t\tmessage = message.replace(/:simple_smile:/g, ':smile:');\n\t\t\tmessage = message.replace(/:memo:/g, ':pencil:');\n\t\t\tmessage = message.replace(/:piggy:/g, ':pig:');\n\t\t\tmessage = message.replace(/:uk:/g, ':gb:');\n\t\t\tmessage = message.replace(/<(http[s]?:[^>]*)>/g, '$1');\n\n\t\t\tfor (const userReplace of Array.from(this.userTags)) {\n\t\t\t\tmessage = message.replace(userReplace.slack, userReplace.rocket);\n\t\t\t\tmessage = message.replace(userReplace.slackLong, userReplace.rocket);\n\t\t\t}\n\t\t} else {\n\t\t\tmessage = '';\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tgetSelection() {\n\t\tconst selectionUsers = this.users.users.map((user) => new SelectionUser(user.id, user.name, user.profile.email, user.deleted, user.is_bot, !user.is_bot));\n\t\tconst selectionChannels = this.channels.channels.map((channel) => new SelectionChannel(channel.id, channel.name, channel.is_archived, true, false));\n\t\treturn new Selection(this.name, selectionUsers, selectionChannels, this.importRecord.count.messages);\n\t}\n}\n","import { Importers } from 'meteor/rocketchat:importer';\nimport { SlackImporterInfo } from '../info';\nimport { SlackImporter } from './importer';\n\nImporters.add(new SlackImporterInfo(), SlackImporter);\n"]}