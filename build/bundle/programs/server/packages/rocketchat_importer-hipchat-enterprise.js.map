{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:importer-hipchat-enterprise/info.js","meteor://ðŸ’»app/packages/rocketchat:importer-hipchat-enterprise/server/importer.js","meteor://ðŸ’»app/packages/rocketchat:importer-hipchat-enterprise/server/adder.js"],"names":["module","export","HipChatEnterpriseImporterInfo","ImporterInfo","watch","require","v","constructor","text","href","HipChatEnterpriseImporter","Base","ProgressStep","Selection","SelectionChannel","SelectionUser","Readable","path","default","s","info","zlib","tarStream","extract","messages","Map","directMessages","prepare","dataURI","sentContentType","fileName","tempUsers","tempRooms","tempMessages","tempDirectMessages","promise","Promise","resolve","reject","on","Meteor","bindEnvironment","header","stream","next","name","endsWith","resume","parse","data","chunk","push","logger","debug","dataString","Buffer","concat","toString","file","JSON","base","updateProgress","PREPARING_USERS","u","User","email","id","username","mention_name","avatar","replace","timezone","isDeleted","is_deleted","PREPARING_CHANNELS","r","Room","creator","owner","created","Date","slugify","isPrivate","privacy","isArchived","is_archived","topic","type","dir","split","roomIdentifier","msgs","m","PrivateUserMessage","senderId","sender","receiverId","receiver","message","indexOf","ts","timestamp","set","roomMsgs","UserMessage","userId","NotificationMessage","alias","TopicRoomMessage","warn","err","usersId","collection","insert","import","importRecord","_id","importer","users","findOne","updateRecord","length","addCountToTotal","channelsId","channels","PREPARING_MESSAGES","messagesCount","channel","entries","get","messagesstatus","getBSONSize","getMaxBSONSize","getBSONSafeArraysFromAnArray","forEach","splitMsg","i","messagesId","directMsgUser","ERROR","selectionUsers","map","selectionChannels","selectionMessages","count","USER_SELECTION","read","pipe","createGunzip","startImport","importSelection","started","now","user","user_id","do_import","update","$set","c","channel_id","startedByUserId","defer","IMPORTING_USERS","runAsUser","existantUser","RocketChat","models","Users","findOneByEmailAddress","findOneByUsername","rocketId","$addToSet","importIds","Accounts","createUser","password","Random","call","joinDefaultChannelsSilenced","setName","deleted","addCountCompleted","IMPORTING_CHANNELS","existantRoom","Rooms","findOneByName","toUpperCase","creatorId","roomInfo","rid","IMPORTING_MESSAGES","ch","messagesMap","hipChannel","getChannelFromRoomIdentifier","room","findOneById","fields","usernames","t","msgGroupData","msg","isNaN","getRocketUserFromUserId","sendMessage","Messages","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","directMsgRoom","directMessagesMap","hipUser","getUserFromDirectMessageIdentifier","sort","join","FINISHING","DONE","e","error","timeTook","log","getProgress","getSelection","directIdentifier","Importers","add"],"mappings":"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","file":"/packages/rocketchat_importer-hipchat-enterprise.js","sourcesContent":["import { ImporterInfo } from 'meteor/rocketchat:importer';\n\nexport class HipChatEnterpriseImporterInfo extends ImporterInfo {\n\tconstructor() {\n\t\tsuper('hipchatenterprise', 'HipChat (tar.gz)', 'application/gzip', [\n\t\t\t{\n\t\t\t\ttext: 'Importer_HipChatEnterprise_Information',\n\t\t\t\thref: 'https://rocket.chat/docs/administrator-guides/import/hipchat/enterprise/',\n\t\t\t},\n\t\t]);\n\t}\n}\n","import {\n\tBase,\n\tProgressStep,\n\tSelection,\n\tSelectionChannel,\n\tSelectionUser,\n} from 'meteor/rocketchat:importer';\nimport { Readable } from 'stream';\nimport path from 'path';\nimport s from 'underscore.string';\n\nexport class HipChatEnterpriseImporter extends Base {\n\tconstructor(info) {\n\t\tsuper(info);\n\n\t\tthis.Readable = Readable;\n\t\tthis.zlib = require('zlib');\n\t\tthis.tarStream = require('tar-stream');\n\t\tthis.extract = this.tarStream.extract();\n\t\tthis.path = path;\n\t\tthis.messages = new Map();\n\t\tthis.directMessages = new Map();\n\t}\n\n\tprepare(dataURI, sentContentType, fileName) {\n\t\tsuper.prepare(dataURI, sentContentType, fileName);\n\n\t\tconst tempUsers = [];\n\t\tconst tempRooms = [];\n\t\tconst tempMessages = new Map();\n\t\tconst tempDirectMessages = new Map();\n\t\tconst promise = new Promise((resolve, reject) => {\n\t\t\tthis.extract.on('entry', Meteor.bindEnvironment((header, stream, next) => {\n\t\t\t\tif (!header.name.endsWith('.json')) {\n\t\t\t\t\tstream.resume();\n\t\t\t\t\treturn next();\n\t\t\t\t}\n\n\t\t\t\tconst info = this.path.parse(header.name);\n\t\t\t\tconst data = [];\n\n\t\t\t\tstream.on('data', Meteor.bindEnvironment((chunk) => {\n\t\t\t\t\tdata.push(chunk);\n\t\t\t\t}));\n\n\t\t\t\tstream.on('end', Meteor.bindEnvironment(() => {\n\t\t\t\t\tthis.logger.debug(`Processing the file: ${ header.name }`);\n\t\t\t\t\tconst dataString = Buffer.concat(data).toString();\n\t\t\t\t\tconst file = JSON.parse(dataString);\n\n\t\t\t\t\tif (info.base === 'users.json') {\n\t\t\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_USERS);\n\t\t\t\t\t\tfor (const u of file) {\n\t\t\t\t\t\t\tif (!u.User.email) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttempUsers.push({\n\t\t\t\t\t\t\t\tid: u.User.id,\n\t\t\t\t\t\t\t\temail: u.User.email,\n\t\t\t\t\t\t\t\tname: u.User.name,\n\t\t\t\t\t\t\t\tusername: u.User.mention_name,\n\t\t\t\t\t\t\t\tavatar: u.User.avatar && u.User.avatar.replace(/\\n/g, ''),\n\t\t\t\t\t\t\t\ttimezone: u.User.timezone,\n\t\t\t\t\t\t\t\tisDeleted: u.User.is_deleted,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (info.base === 'rooms.json') {\n\t\t\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\t\t\t\t\tfor (const r of file) {\n\t\t\t\t\t\t\ttempRooms.push({\n\t\t\t\t\t\t\t\tid: r.Room.id,\n\t\t\t\t\t\t\t\tcreator: r.Room.owner,\n\t\t\t\t\t\t\t\tcreated: new Date(r.Room.created),\n\t\t\t\t\t\t\t\tname: s.slugify(r.Room.name),\n\t\t\t\t\t\t\t\tisPrivate: r.Room.privacy === 'private',\n\t\t\t\t\t\t\t\tisArchived: r.Room.is_archived,\n\t\t\t\t\t\t\t\ttopic: r.Room.topic,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (info.base === 'history.json') {\n\t\t\t\t\t\tconst [type, id] = info.dir.split('/'); // ['users', '1']\n\t\t\t\t\t\tconst roomIdentifier = `${ type }/${ id }`;\n\t\t\t\t\t\tif (type === 'users') {\n\t\t\t\t\t\t\tconst msgs = [];\n\t\t\t\t\t\t\tfor (const m of file) {\n\t\t\t\t\t\t\t\tif (m.PrivateUserMessage) {\n\t\t\t\t\t\t\t\t\tmsgs.push({\n\t\t\t\t\t\t\t\t\t\ttype: 'user',\n\t\t\t\t\t\t\t\t\t\tid: `hipchatenterprise-${ m.PrivateUserMessage.id }`,\n\t\t\t\t\t\t\t\t\t\tsenderId: m.PrivateUserMessage.sender.id,\n\t\t\t\t\t\t\t\t\t\treceiverId: m.PrivateUserMessage.receiver.id,\n\t\t\t\t\t\t\t\t\t\ttext: m.PrivateUserMessage.message.indexOf('/me ') === -1 ? m.PrivateUserMessage.message : `${ m.PrivateUserMessage.message.replace(/\\/me /, '_') }_`,\n\t\t\t\t\t\t\t\t\t\tts: new Date(m.PrivateUserMessage.timestamp.split(' ')[0]),\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttempDirectMessages.set(roomIdentifier, msgs);\n\t\t\t\t\t\t} else if (type === 'rooms') {\n\t\t\t\t\t\t\tconst roomMsgs = [];\n\n\t\t\t\t\t\t\tfor (const m of file) {\n\t\t\t\t\t\t\t\tif (m.UserMessage) {\n\t\t\t\t\t\t\t\t\troomMsgs.push({\n\t\t\t\t\t\t\t\t\t\ttype: 'user',\n\t\t\t\t\t\t\t\t\t\tid: `hipchatenterprise-${ id }-${ m.UserMessage.id }`,\n\t\t\t\t\t\t\t\t\t\tuserId: m.UserMessage.sender.id,\n\t\t\t\t\t\t\t\t\t\ttext: m.UserMessage.message.indexOf('/me ') === -1 ? m.UserMessage.message : `${ m.UserMessage.message.replace(/\\/me /, '_') }_`,\n\t\t\t\t\t\t\t\t\t\tts: new Date(m.UserMessage.timestamp.split(' ')[0]),\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else if (m.NotificationMessage) {\n\t\t\t\t\t\t\t\t\troomMsgs.push({\n\t\t\t\t\t\t\t\t\t\ttype: 'user',\n\t\t\t\t\t\t\t\t\t\tid: `hipchatenterprise-${ id }-${ m.NotificationMessage.id }`,\n\t\t\t\t\t\t\t\t\t\tuserId: 'rocket.cat',\n\t\t\t\t\t\t\t\t\t\talias: m.NotificationMessage.sender,\n\t\t\t\t\t\t\t\t\t\ttext: m.NotificationMessage.message.indexOf('/me ') === -1 ? m.NotificationMessage.message : `${ m.NotificationMessage.message.replace(/\\/me /, '_') }_`,\n\t\t\t\t\t\t\t\t\t\tts: new Date(m.NotificationMessage.timestamp.split(' ')[0]),\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else if (m.TopicRoomMessage) {\n\t\t\t\t\t\t\t\t\troomMsgs.push({\n\t\t\t\t\t\t\t\t\t\ttype: 'topic',\n\t\t\t\t\t\t\t\t\t\tid: `hipchatenterprise-${ id }-${ m.TopicRoomMessage.id }`,\n\t\t\t\t\t\t\t\t\t\tuserId: m.TopicRoomMessage.sender.id,\n\t\t\t\t\t\t\t\t\t\tts: new Date(m.TopicRoomMessage.timestamp.split(' ')[0]),\n\t\t\t\t\t\t\t\t\t\ttext: m.TopicRoomMessage.message,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis.logger.warn('HipChat Enterprise importer isn\\'t configured to handle this message:', m);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttempMessages.set(roomIdentifier, roomMsgs);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.logger.warn(`HipChat Enterprise importer isn't configured to handle \"${ type }\" files.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// What are these files!?\n\t\t\t\t\t\tthis.logger.warn(`HipChat Enterprise importer doesn't know what to do with the file \"${ header.name }\" :o`, info);\n\t\t\t\t\t}\n\t\t\t\t\tnext();\n\t\t\t\t}));\n\t\t\t\tstream.on('error', () => next());\n\n\t\t\t\tstream.resume();\n\t\t\t}));\n\n\t\t\tthis.extract.on('error', (err) => {\n\t\t\t\tthis.logger.warn('extract error:', err);\n\t\t\t\treject();\n\t\t\t});\n\n\t\t\tthis.extract.on('finish', Meteor.bindEnvironment(() => {\n\t\t\t\t// Insert the users record, eventually this might have to be split into several ones as well\n\t\t\t\t// if someone tries to import a several thousands users instance\n\t\t\t\tconst usersId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'users', users: tempUsers });\n\t\t\t\tthis.users = this.collection.findOne(usersId);\n\t\t\t\tsuper.updateRecord({ 'count.users': tempUsers.length });\n\t\t\t\tsuper.addCountToTotal(tempUsers.length);\n\n\t\t\t\t// Insert the channels records.\n\t\t\t\tconst channelsId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'channels', channels: tempRooms });\n\t\t\t\tthis.channels = this.collection.findOne(channelsId);\n\t\t\t\tsuper.updateRecord({ 'count.channels': tempRooms.length });\n\t\t\t\tsuper.addCountToTotal(tempRooms.length);\n\n\t\t\t\t// Save the messages records to the import record for `startImport` usage\n\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\t\t\t\tlet messagesCount = 0;\n\t\t\t\tfor (const [channel, msgs] of tempMessages.entries()) {\n\t\t\t\t\tif (!this.messages.get(channel)) {\n\t\t\t\t\t\tthis.messages.set(channel, new Map());\n\t\t\t\t\t}\n\n\t\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\t\tsuper.updateRecord({ messagesstatus: channel });\n\n\t\t\t\t\tif (Base.getBSONSize(msgs) > Base.getMaxBSONSize()) {\n\t\t\t\t\t\tBase.getBSONSafeArraysFromAnArray(msgs).forEach((splitMsg, i) => {\n\t\t\t\t\t\t\tconst messagesId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'messages', name: `${ channel }/${ i }`, messages: splitMsg });\n\t\t\t\t\t\t\tthis.messages.get(channel).set(`${ channel }.${ i }`, this.collection.findOne(messagesId));\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst messagesId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'messages', name: `${ channel }`, messages: msgs });\n\t\t\t\t\t\tthis.messages.get(channel).set(channel, this.collection.findOne(messagesId));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (const [directMsgUser, msgs] of tempDirectMessages.entries()) {\n\t\t\t\t\tthis.logger.debug(`Preparing the direct messages for: ${ directMsgUser }`);\n\t\t\t\t\tif (!this.directMessages.get(directMsgUser)) {\n\t\t\t\t\t\tthis.directMessages.set(directMsgUser, new Map());\n\t\t\t\t\t}\n\n\t\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\t\tsuper.updateRecord({ messagesstatus: directMsgUser });\n\n\t\t\t\t\tif (Base.getBSONSize(msgs) > Base.getMaxBSONSize()) {\n\t\t\t\t\t\tBase.getBSONSafeArraysFromAnArray(msgs).forEach((splitMsg, i) => {\n\t\t\t\t\t\t\tconst messagesId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'directMessages', name: `${ directMsgUser }/${ i }`, messages: splitMsg });\n\t\t\t\t\t\t\tthis.directMessages.get(directMsgUser).set(`${ directMsgUser }.${ i }`, this.collection.findOne(messagesId));\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst messagesId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'directMessages', name: `${ directMsgUser }`, messages: msgs });\n\t\t\t\t\t\tthis.directMessages.get(directMsgUser).set(directMsgUser, this.collection.findOne(messagesId));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsuper.updateRecord({ 'count.messages': messagesCount, messagesstatus: null });\n\t\t\t\tsuper.addCountToTotal(messagesCount);\n\n\t\t\t\t// Ensure we have some users, channels, and messages\n\t\t\t\tif (tempUsers.length === 0 || tempRooms.length === 0 || messagesCount === 0) {\n\t\t\t\t\tthis.logger.warn(`The loaded users count ${ tempUsers.length }, the loaded rooms ${ tempRooms.length }, and the loaded messages ${ messagesCount }`);\n\t\t\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\t\t\treject();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst selectionUsers = tempUsers.map((u) => new SelectionUser(u.id, u.username, u.email, u.isDeleted, false, true));\n\t\t\t\tconst selectionChannels = tempRooms.map((r) => new SelectionChannel(r.id, r.name, r.isArchived, true, r.isPrivate));\n\t\t\t\tconst selectionMessages = this.importRecord.count.messages;\n\n\t\t\t\tsuper.updateProgress(ProgressStep.USER_SELECTION);\n\n\t\t\t\tresolve(new Selection(this.name, selectionUsers, selectionChannels, selectionMessages));\n\t\t\t}));\n\n\t\t\t// Wish I could make this cleaner :(\n\t\t\tconst split = dataURI.split(',');\n\t\t\tconst read = new this.Readable;\n\t\t\tread.push(new Buffer(split[split.length - 1], 'base64'));\n\t\t\tread.push(null);\n\t\t\tread.pipe(this.zlib.createGunzip()).pipe(this.extract);\n\t\t});\n\n\t\treturn promise;\n\t}\n\n\tstartImport(importSelection) {\n\t\tsuper.startImport(importSelection);\n\t\tconst started = Date.now();\n\n\t\t// Ensure we're only going to import the users that the user has selected\n\t\tfor (const user of importSelection.users) {\n\t\t\tfor (const u of this.users.users) {\n\t\t\t\tif (u.id === user.user_id) {\n\t\t\t\t\tu.do_import = user.do_import;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.collection.update({ _id: this.users._id }, { $set: { users: this.users.users } });\n\n\t\t// Ensure we're only importing the channels the user has selected.\n\t\tfor (const channel of importSelection.channels) {\n\t\t\tfor (const c of this.channels.channels) {\n\t\t\t\tif (c.id === channel.channel_id) {\n\t\t\t\t\tc.do_import = channel.do_import;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.collection.update({ _id: this.channels._id }, { $set: { channels: this.channels.channels } });\n\n\t\tconst startedByUserId = Meteor.userId();\n\t\tMeteor.defer(() => {\n\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_USERS);\n\n\t\t\ttry {\n\t\t\t\t// Import the users\n\t\t\t\tfor (const u of this.users.users) {\n\t\t\t\t\tthis.logger.debug(`Starting the user import: ${ u.username } and are we importing them? ${ u.do_import }`);\n\t\t\t\t\tif (!u.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tlet existantUser = RocketChat.models.Users.findOneByEmailAddress(u.email);\n\n\t\t\t\t\t\t// If we couldn't find one by their email address, try to find an existing user by their username\n\t\t\t\t\t\tif (!existantUser) {\n\t\t\t\t\t\t\texistantUser = RocketChat.models.Users.findOneByUsername(u.username);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (existantUser) {\n\t\t\t\t\t\t\t// since we have an existing user, let's try a few things\n\t\t\t\t\t\t\tu.rocketId = existantUser._id;\n\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: u.rocketId }, { $addToSet: { importIds: u.id } });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst userId = Accounts.createUser({ email: u.email, password: Random.id() });\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tMeteor.call('setUsername', u.username, { joinDefaultChannelsSilenced: true });\n\t\t\t\t\t\t\t\t// TODO: Use moment timezone to calc the time offset - Meteor.call 'userSetUtcOffset', user.tz_offset / 3600\n\t\t\t\t\t\t\t\tRocketChat.models.Users.setName(userId, u.name);\n\t\t\t\t\t\t\t\t// TODO: Think about using a custom field for the users \"title\" field\n\n\t\t\t\t\t\t\t\tif (u.avatar) {\n\t\t\t\t\t\t\t\t\tMeteor.call('setAvatarFromService', `data:image/png;base64,${ u.avatar }`);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Deleted users are 'inactive' users in Rocket.Chat\n\t\t\t\t\t\t\t\tif (u.deleted) {\n\t\t\t\t\t\t\t\t\tMeteor.call('setUserActiveStatus', userId, false);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: userId }, { $addToSet: { importIds: u.id } });\n\t\t\t\t\t\t\t\tu.rocketId = userId;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.collection.update({ _id: this.users._id }, { $set: { users: this.users.users } });\n\n\t\t\t\t// Import the channels\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_CHANNELS);\n\t\t\t\tfor (const c of this.channels.channels) {\n\t\t\t\t\tif (!c.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst existantRoom = RocketChat.models.Rooms.findOneByName(c.name);\n\t\t\t\t\t\t// If the room exists or the name of it is 'general', then we don't need to create it again\n\t\t\t\t\t\tif (existantRoom || c.name.toUpperCase() === 'GENERAL') {\n\t\t\t\t\t\t\tc.rocketId = c.name.toUpperCase() === 'GENERAL' ? 'GENERAL' : existantRoom._id;\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: c.rocketId }, { $addToSet: { importIds: c.id } });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Find the rocketchatId of the user who created this channel\n\t\t\t\t\t\t\tlet creatorId = startedByUserId;\n\t\t\t\t\t\t\tfor (const u of this.users.users) {\n\t\t\t\t\t\t\t\tif (u.id === c.creator && u.do_import) {\n\t\t\t\t\t\t\t\t\tcreatorId = u.rocketId;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Create the channel\n\t\t\t\t\t\t\tMeteor.runAsUser(creatorId, () => {\n\t\t\t\t\t\t\t\tconst roomInfo = Meteor.call(c.isPrivate ? 'createPrivateGroup' : 'createChannel', c.name, []);\n\t\t\t\t\t\t\t\tc.rocketId = roomInfo.rid;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: c.rocketId }, { $set: { ts: c.created, topic: c.topic }, $addToSet: { importIds: c.id } });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.collection.update({ _id: this.channels._id }, { $set: { channels: this.channels.channels } });\n\n\t\t\t\t// Import the Messages\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_MESSAGES);\n\t\t\t\tfor (const [ch, messagesMap] of this.messages.entries()) {\n\t\t\t\t\tconst hipChannel = this.getChannelFromRoomIdentifier(ch);\n\t\t\t\t\tif (!hipChannel.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst room = RocketChat.models.Rooms.findOneById(hipChannel.rocketId, { fields: { usernames: 1, t: 1, name: 1 } });\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tfor (const [msgGroupData, msgs] of messagesMap.entries()) {\n\t\t\t\t\t\t\tsuper.updateRecord({ messagesstatus: `${ ch }/${ msgGroupData }.${ msgs.messages.length }` });\n\t\t\t\t\t\t\tfor (const msg of msgs.messages) {\n\t\t\t\t\t\t\t\tif (isNaN(msg.ts)) {\n\t\t\t\t\t\t\t\t\tthis.logger.warn(`Timestamp on a message in ${ ch }/${ msgGroupData } is invalid`);\n\t\t\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst creator = this.getRocketUserFromUserId(msg.userId);\n\t\t\t\t\t\t\t\tif (creator) {\n\t\t\t\t\t\t\t\t\tswitch (msg.type) {\n\t\t\t\t\t\t\t\t\t\tcase 'user':\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(creator, {\n\t\t\t\t\t\t\t\t\t\t\t\t_id: msg.id,\n\t\t\t\t\t\t\t\t\t\t\t\tts: msg.ts,\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\t\t\t\talias: msg.alias,\n\t\t\t\t\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t_id: creator._id,\n\t\t\t\t\t\t\t\t\t\t\t\t\tusername: creator.username,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t}, room, true);\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 'topic':\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', room._id, msg.text, creator, { _id: msg.id, ts: msg.ts });\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Import the Direct Messages\n\t\t\t\tfor (const [directMsgRoom, directMessagesMap] of this.directMessages.entries()) {\n\t\t\t\t\tconst hipUser = this.getUserFromDirectMessageIdentifier(directMsgRoom);\n\t\t\t\t\tif (!hipUser.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Verify this direct message user's room is valid (confusing but idk how else to explain it)\n\t\t\t\t\tif (!this.getRocketUserFromUserId(hipUser.id)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const [msgGroupData, msgs] of directMessagesMap.entries()) {\n\t\t\t\t\t\tsuper.updateRecord({ messagesstatus: `${ directMsgRoom }/${ msgGroupData }.${ msgs.messages.length }` });\n\t\t\t\t\t\tfor (const msg of msgs.messages) {\n\t\t\t\t\t\t\tif (isNaN(msg.ts)) {\n\t\t\t\t\t\t\t\tthis.logger.warn(`Timestamp on a message in ${ directMsgRoom }/${ msgGroupData } is invalid`);\n\t\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// make sure the message sender is a valid user inside rocket.chat\n\t\t\t\t\t\t\tconst sender = this.getRocketUserFromUserId(msg.senderId);\n\t\t\t\t\t\t\tif (!sender) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// make sure the receiver of the message is a valid rocket.chat user\n\t\t\t\t\t\t\tconst receiver = this.getRocketUserFromUserId(msg.receiverId);\n\t\t\t\t\t\t\tif (!receiver) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet room = RocketChat.models.Rooms.findOneById([receiver._id, sender._id].sort().join(''));\n\t\t\t\t\t\t\tif (!room) {\n\t\t\t\t\t\t\t\tMeteor.runAsUser(sender._id, () => {\n\t\t\t\t\t\t\t\t\tconst roomInfo = Meteor.call('createDirectMessage', receiver.username);\n\t\t\t\t\t\t\t\t\troom = RocketChat.models.Rooms.findOneById(roomInfo.rid);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tMeteor.runAsUser(sender._id, () => {\n\t\t\t\t\t\t\t\tRocketChat.sendMessage(sender, {\n\t\t\t\t\t\t\t\t\t_id: msg.id,\n\t\t\t\t\t\t\t\t\tts: msg.ts,\n\t\t\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t\t_id: sender._id,\n\t\t\t\t\t\t\t\t\t\tusername: sender.username,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}, room, true);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsuper.updateProgress(ProgressStep.FINISHING);\n\t\t\t\tsuper.updateProgress(ProgressStep.DONE);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\t}\n\n\t\t\tconst timeTook = Date.now() - started;\n\t\t\tthis.logger.log(`HipChat Enterprise Import took ${ timeTook } milliseconds.`);\n\t\t});\n\n\t\treturn super.getProgress();\n\t}\n\n\tgetSelection() {\n\t\tconst selectionUsers = this.users.users.map((u) => new SelectionUser(u.id, u.username, u.email, false, false, true));\n\t\tconst selectionChannels = this.channels.channels.map((c) => new SelectionChannel(c.id, c.name, false, true, c.isPrivate));\n\t\tconst selectionMessages = this.importRecord.count.messages;\n\n\t\treturn new Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n\t}\n\n\tgetChannelFromRoomIdentifier(roomIdentifier) {\n\t\tfor (const ch of this.channels.channels) {\n\t\t\tif (`rooms/${ ch.id }` === roomIdentifier) {\n\t\t\t\treturn ch;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetUserFromDirectMessageIdentifier(directIdentifier) {\n\t\tfor (const u of this.users.users) {\n\t\t\tif (`users/${ u.id }` === directIdentifier) {\n\t\t\t\treturn u;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetRocketUserFromUserId(userId) {\n\t\tfor (const u of this.users.users) {\n\t\t\tif (u.id === userId) {\n\t\t\t\treturn RocketChat.models.Users.findOneById(u.rocketId, { fields: { username: 1 } });\n\t\t\t}\n\t\t}\n\t}\n}\n","import { Importers } from 'meteor/rocketchat:importer';\nimport { HipChatEnterpriseImporterInfo } from '../info';\nimport { HipChatEnterpriseImporter } from './importer';\n\nImporters.add(new HipChatEnterpriseImporterInfo(), HipChatEnterpriseImporter);\n"]}